{
  "about": {
    "readme": "# About package\r\n\r\nView useful information about your Pulsar installation.\r\n\r\n![About Pulsar](https://cloud.githubusercontent.com/assets/16760489/19395499/69bbb780-922d-11e6-9779-2b8327027ea5.png)\r\n\r\nThis is a package for [Pulsar](https://pulsar-edit.dev), a community-led hyper-hackable text editor\r\n\r\n## Usage\r\n\r\nThis package provides a cross-platform \"About Pulsar\" view that displays information about your Pulsar installation, which currently includes the current version, the license, and the Terms of Use.\r\n\r\n## Contributing\r\nAlways feel free to help out!  Whether it's filing bugs and feature requests\r\nor working on some of the open issues, Pulsar's [contributing guide](https://github.com/pulsar-edit/.github/blob/main/CONTRIBUTING.md)\r\nwill help get you started while the [guide for contributing to packages](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#contributing-to-packages)\r\nhas some extra information.\r\n",
    "metadata": {
      "name": "about",
      "author": "Machist√© N. Quintana <mnquintana@users.noreply.github.com>",
      "main": "./lib/main",
      "version": "1.9.1",
      "description": "View useful information about your Pulsar installation.",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": ">=1.7 <2.0.0"
      },
      "dependencies": {
        "etch": "^0.14.1"
      },
      "deserializers": {
        "AboutView": "deserializeAboutView"
      }
    }
  },
  "archive-view": {
    "readme": "# Archive view package\r\n\r\nAdds support for browsing archive files in Pulsar with the following extensions:\r\n\r\n* `.egg`\r\n* `.epub`\r\n* `.jar`\r\n* `.love`\r\n* `.nupkg`\r\n* `.tar`\r\n* `.tar.gz`\r\n* `.tgz`\r\n* `.war`\r\n* `.whl`\r\n* `.xpi`\r\n* `.zip`\r\n\r\nSelect a file to extract it to a temp file and open it in a new editor.\r\n\r\n![](./resources/preview.png)\r\n",
    "metadata": {
      "name": "archive-view",
      "version": "0.66.0",
      "description": "View the files and folders inside archive files",
      "main": "./lib/archive-editor",
      "dependencies": {
        "etch": "^0.14.1",
        "humanize-plus": "~1.8.2",
        "ls-archive": "1.3.4",
        "temp": "^0.9.4"
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": "*"
      },
      "deserializers": {
        "ArchiveEditor": "deserialize",
        "ArchiveEditorView": "deserialize"
      },
      "consumedServices": {
        "atom.file-icons": {
          "versions": {
            "1.0.0": "consumeFileIcons"
          }
        },
        "file-icons.element-icons": {
          "versions": {
            "1.0.0": "consumeElementIcons"
          }
        }
      }
    }
  },
  "atom-dark-syntax": {
    "readme": "# Pulsar Dark Syntax theme\r\n\r\nA dark syntax theme for Pulsar.\r\n\r\nThis theme is installed by default with Pulsar and can be activated by going to\r\nthe _Themes_ section in the Settings view (`cmd-,`) and selecting it from the\r\n_Syntax Themes_ dropdown menu.\r\n\r\n![](https://f.cloud.github.com/assets/671378/2264549/f49e9bf2-9e73-11e3-9329-e2d59dd1b119.png)\r\n",
    "metadata": {
      "name": "atom-dark-syntax",
      "theme": "syntax",
      "version": "0.29.1",
      "description": "A dark theme for syntax",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      }
    }
  },
  "atom-dark-ui": {
    "readme": "# Pulsar Dark UI theme\r\n\r\nA dark UI theme for Pulsar.\r\n\r\nThis theme is installed by default with Pulsar and can be activated by going to\r\nthe _Themes_ section in the Settings view (`cmd-,`) and selecting it from the\r\n_UI Themes_ drop-down menu.\r\n\r\n![](https://f.cloud.github.com/assets/671378/2265086/c6897dba-9e7b-11e3-945d-551cac610717.png)\r\n",
    "metadata": {
      "name": "atom-dark-ui",
      "theme": "ui",
      "version": "0.53.3",
      "description": "A dark UI theme for Pulsar",
      "license": "MIT",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "engines": {
        "atom": ">0.40.0"
      }
    }
  },
  "atom-light-syntax": {
    "readme": "# Pulsar Light Syntax theme\r\n\r\nA light syntax theme for Pulsar.\r\n\r\nThis theme is installed by default with Pulsar and can be activated by going to\r\nthe _Themes_ section in the Settings view (`cmd-,`) and selecting it from the\r\n_Syntax Themes_ dropdown menu.\r\n\r\n![](https://f.cloud.github.com/assets/671378/2264690/886ce496-9e75-11e3-971a-9a24f359c481.png)\r\n",
    "metadata": {
      "name": "atom-light-syntax",
      "theme": "syntax",
      "version": "0.29.1",
      "description": "A light syntax theme",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": ">0.40.0"
      }
    }
  },
  "atom-light-ui": {
    "readme": "# Pulsar Light UI theme\r\n\r\nA light UI theme for Pulsar.\r\n\r\nThis theme is installed by default with Pulsar and can be activated by going to\r\nthe _Themes_ section in the Settings view (`cmd-,`) and selecting it from the\r\n_UI Themes_ drop-down menu.\r\n\r\n![](https://f.cloud.github.com/assets/671378/2265022/bb148a20-9e7a-11e3-81c8-bf5965d48183.png)\r\n",
    "metadata": {
      "name": "atom-light-ui",
      "theme": "ui",
      "version": "0.46.3",
      "description": "A light UI theme for Pulsar",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      }
    }
  },
  "autocomplete-atom-api": {
    "readme": "# Atom API Autocomplete package\r\n\r\nProvides autocompletions for properties and methods available from the `atom.` global.\r\n\r\n![autocomplete-atom-api](https://cloud.githubusercontent.com/assets/69169/7211322/9c402ea2-e50e-11e4-9d74-56ab91aa101d.gif)\r\n",
    "metadata": {
      "name": "autocomplete-atom-api",
      "version": "0.10.7",
      "description": "Pulsar API autocompletions",
      "main": "./lib/main",
      "license": "MIT",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "engines": {
        "atom": ">=0.174.0 <2.0.0"
      },
      "providedServices": {
        "autocomplete.provider": {
          "versions": {
            "2.0.0": "getProvider"
          }
        }
      },
      "devDependencies": {
        "request": "^2.53.0",
        "temp": "^0.8.1"
      }
    }
  },
  "autocomplete-css": {
    "readme": "# CSS Autocomplete package\r\n\r\nCSS property name and value autocompletions in Pulsar. Uses the\r\n[autocomplete-plus](https://github.com/pulsar-edit/autocomplete-plus) package.\r\n\r\nThis is powered by the list of CSS property and values [here](https://github.com/adobe/brackets/blob/master/src/extensions/default/CSSCodeHints/CSSProperties.json).\r\n\r\n![css-completions](https://cloud.githubusercontent.com/assets/671378/6357910/b9ecbe7c-bc1c-11e4-89b1-033e626c891f.gif)\r\n\r\nYou can update the prebuilt list of completions by running `node update.js` at the root of this package and checking for changes within `completions.json`. This does rely on having dev dependencies installed, so ensure you install all dependencies before doing so.\r\n",
    "metadata": {
      "name": "autocomplete-css",
      "version": "0.17.5",
      "description": "CSS property name and value autocompletions",
      "main": "./lib/main.js",
      "license": "MIT",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "engines": {
        "atom": ">=0.174.0 <2.0.0"
      },
      "providedServices": {
        "autocomplete.provider": {
          "versions": {
            "2.0.0": "getProvider"
          }
        }
      },
      "devDependencies": {
        "@webref/css": "^6.3.4",
        "content": "github:mdn/content",
        "superagent": "^8.0.9"
      }
    }
  },
  "autocomplete-html": {
    "readme": "# HTML Autocomplete package\r\n\r\nHTML tag and attribute autocompletions in Pulsar.\r\n\r\nTag and attribute autocompletions are powered by the list of HTML tags [here](https://github.com/adobe/brackets/blob/master/src/extensions/default/HTMLCodeHints/HtmlTags.json) and HTML attributes [here](https://github.com/adobe/brackets/blob/master/src/extensions/default/HTMLCodeHints/HtmlAttributes.json).\r\nDescriptions are powered by [MDN](https://developer.mozilla.org).\r\n\r\n![html-completions](https://cloud.githubusercontent.com/assets/2766036/25668197/ffd24928-2ff3-11e7-85fc-b327ac2287e6.gif)\r\n\r\nYou can update the prebuilt list of tags and attributes names and values by running `npm run update` at the root of the package and then checking-in the changed `completions.json` file.\r\n",
    "metadata": {
      "name": "autocomplete-html",
      "version": "0.8.9",
      "description": "HTML element and attribute autocompletions",
      "main": "./lib/main",
      "license": "MIT",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "engines": {
        "atom": ">=0.174.0 <2.0.0"
      },
      "scripts": {
        "update": "node ./update/update.js",
        "update:test": "jest ./update/update.test.js"
      },
      "providedServices": {
        "autocomplete.provider": {
          "versions": {
            "2.0.0": "getProvider"
          }
        }
      },
      "devDependencies": {
        "@webref/elements": "^2.1.0",
        "chrome-devtools-frontend": "^1.0.1070764",
        "content": "github:mdn/content",
        "esm": "^3.2.25",
        "jest": "^29.4.3",
        "joi": "^17.8.3",
        "ts-import": "^2.0.40"
      }
    }
  },
  "autocomplete-plus": {
    "readme": "# Autocomplete+ package\r\n\r\nDisplays possible autocomplete suggestions on keystroke (or manually by typing `ctrl-space`) and inserts a suggestion in the editor if confirmed.\r\n\r\n![autocomplete+](https://cloud.githubusercontent.com/assets/744740/7656861/9fb8bcc4-faea-11e4-9814-9dca218ded93.png)\r\n\r\n[Changelog](https://github.com/pulsar-edit/pulsar/blob/master/CHANGELOG.md)\r\n\r\n## Installation\r\n\r\n`autocomplete+` is bundled with Pulsar. You don't have to do anything to install it.\r\n\r\n## Providers\r\n\r\n`autocomplete+` has a powerful autocomplete provider API, allowing provider authors to add language-specific behavior to this package.\r\n\r\nYou should *definitely* install additional providers (the default provider bundled with this package is somewhat crude): https://github.com/atom/autocomplete-plus/wiki/Autocomplete-Providers\r\n\r\n## Usage\r\n\r\nJust type some stuff, and autocomplete+ will automatically show you some suggestions.\r\nPress `UP` and `DOWN` to select another suggestion, press `TAB` or `ENTER` to confirm your selection. You can change the default keymap in `Preferences`:\r\n\r\n* Keymap For Confirming A Suggestion\r\n\r\nAdditionally, the confirm keymap can be customized in your keymap.cson:\r\n\r\n```coffeescript\r\n'atom-text-editor.autocomplete-active':\r\n  'tab': 'unset!'\r\n  'ctrl-shift-a': 'autocomplete-plus:confirm'\r\n```\r\n\r\nIf setting custom keybindings, use the `none` setting for the confirmation keymap. All this option does is not set any other keybindings. This allows the `TAB` and `ENTER` keys to be used like normal, without side effects.\r\n\r\n### Remapping Movement Commands\r\n\r\nBy default, autocomplete-plus commandeers the editor's core movement commands when the suggestion list is open. You may want to change these movement commands to use your own keybindings.\r\n\r\nFirst you need to set the `autocomplete-plus.useCoreMovementCommands` setting to `false`, which you can do from the `autocomplete-plus` settings in the settings view.\r\n\r\n![core-movement](https://cloud.githubusercontent.com/assets/69169/8839134/72a9c7e6-3087-11e5-9d1f-8d3d15961327.jpg)\r\n\r\nOr by adding this to your config file:\r\n\r\n```coffee\r\n\"*\":\r\n  \"autocomplete-plus\":\r\n    \"useCoreMovementCommands\": false\r\n```\r\n\r\nThen add these to your keymap file:\r\n\r\n```coffeescript\r\n'body atom-text-editor.autocomplete-active':\r\n  'ctrl-p': 'autocomplete-plus:move-up'\r\n  'ctrl-n': 'autocomplete-plus:move-down'\r\n  'pageup': 'autocomplete-plus:page-up'\r\n  'pagedown': 'autocomplete-plus:page-down'\r\n  'home': 'autocomplete-plus:move-to-top'\r\n  'end': 'autocomplete-plus:move-to-bottom'\r\n```\r\n\r\n## Features\r\n\r\n* Shows suggestions while typing\r\n* Includes a default provider (`SymbolProvider`):\r\n  * Wordlist generation happens when you open a file, while editing the file, and on save\r\n  * Suggestions are calculated using `fuzzaldrin`\r\n* Exposes a provider API which can be used to extend the functionality of the package and provide targeted / contextually correct suggestions\r\n* Disable autocomplete for file(s) via blacklisting, e.g. `*.md` to blacklist Markdown files\r\n* Disable autocomplete for editor scope(s) via blacklisting\r\n* Expands a snippet if an autocomplete+ provider includes one in a suggestion\r\n* Allows external editors to register for autocompletions\r\n\r\n## Provider API\r\n\r\nGreat autocomplete depends on having great autocomplete providers. If there is not already a great provider for the language / grammar that you are working in, please consider creating a provider.\r\n\r\n[Read the `Provider API` documentation](https://github.com/atom/autocomplete-plus/wiki/Provider-API) to learn how to create a new autocomplete provider.\r\n\r\n## `SymbolProvider` Configuration\r\n\r\nIf the default `SymbolProvider` is missing useful information for the language / grammar you're working with, please take a look at the [`SymbolProvider` Config API](https://github.com/atom/autocomplete-plus/wiki/SymbolProvider-Config-API).\r\n\r\n## The `watchEditor` API\r\n\r\nThe `watchEditor` method on the `AutocompleteManager` object is exposed as a [provided service](https://pulsar-edit.dev/docs/launch-manual/sections/behind-pulsar/#interacting-with-other-packages-via-services), named `autocomplete.watchEditor`. The method allows external editors to register for autocompletions from providers with a given set of labels. Disposing the returned object will undo this request. External packages can access this service with the following code.\r\n\r\nIn `package.json`:\r\n```\r\n{\r\n  \"consumedServices\": {\r\n    \"autocomplete.watchEditor\": {\r\n      \"versions\": {\r\n        \"1.0.0\": \"consumeAutocompleteWatchEditor\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nIn the main module file:\r\n```\r\nconsumeAutocompleteWatchEditor(watchEditor) {\r\n  this.autocompleteDisposable = watchEditor(\r\n    this.editor, ['symbol-provider']\r\n  )\r\n}\r\n```\r\n",
    "metadata": {
      "name": "autocomplete-plus",
      "version": "2.42.6",
      "main": "./lib/main.js",
      "description": "Display possible completions in the editor while typing",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": ">=0.189.0 <2.0.0"
      },
      "dependencies": {
        "atom-slick": "^2.0.0",
        "grim": "^2.0.1",
        "minimatch": "^3.0.3",
        "selector-kit": "^0.1.0",
        "stable": "^0.1.8",
        "underscore-plus": "^1.7.0"
      },
      "devDependencies": {
        "fs-plus": "^3.1.1",
        "temp": "^0.9.4"
      },
      "providedServices": {
        "autocomplete.watchEditor": {
          "versions": {
            "1.0.0": "provideWatchEditor"
          }
        }
      },
      "consumedServices": {
        "autocomplete.provider": {
          "versions": {
            "1.0.0": "consumeProvider_1",
            "1.1.0": "consumeProvider_1_1",
            "2.0.0": "consumeProvider_2",
            "3.0.0": "consumeProvider_3",
            "4.0.0": "consumeProvider_4",
            "5.0.0": "consumeProvider_5"
          }
        },
        "snippets": {
          "versions": {
            "0.1.0": "consumeSnippets"
          }
        }
      },
      "configSchema": {
        "enableAutoActivation": {
          "title": "Show Suggestions On Keystroke",
          "description": "Suggestions will show as you type if this preference is enabled. If it is disabled, you can still see suggestions by using the keymapping for 'autocomplete-plus:activate' (shown below).",
          "type": "boolean",
          "default": true,
          "order": 1
        },
        "autoActivationDelay": {
          "title": "Delay Before Suggestions Are Shown",
          "description": "If you are experiencing performance issues when typing, you should try increasing this value to a non-zero number (e.g. 100).",
          "type": "integer",
          "default": 0,
          "order": 2
        },
        "maxVisibleSuggestions": {
          "title": "Maximum Visible Suggestions",
          "description": "The suggestion list will only show this many suggestions.",
          "type": "integer",
          "default": 10,
          "minimum": 1,
          "order": 3
        },
        "confirmCompletion": {
          "title": "Keymap For Confirming A Suggestion",
          "description": "You should use the key(s) indicated here to confirm a suggestion from the suggestion list and have it inserted into the file.",
          "type": "string",
          "default": "tab and enter",
          "enum": [
            "tab",
            "enter",
            "tab and enter",
            "tab always, enter when suggestion explicitly selected",
            "none"
          ],
          "order": 4
        },
        "useCoreMovementCommands": {
          "title": "Use Core Movement Commands",
          "description": "Disable this if you want to bind your own keystrokes to move around the suggestion list. You will also need to add definitions to your keymap. See: https://github.com/pulsar-edit/pulsar/blob/master/packages/autocomplete-plus/README.md#remapping-movement-commands",
          "type": "boolean",
          "default": true,
          "order": 5
        },
        "fileBlacklist": {
          "title": "File Blacklist",
          "description": "Suggestions will not be provided for files matching this list, e.g. `*.md` for Markdown files. To blacklist more than one file extension, use comma as a separator, e.g. `*.md, *.txt` (both Markdown and text files).",
          "type": "array",
          "default": [
            ".*"
          ],
          "items": {
            "type": "string"
          },
          "order": 6
        },
        "scopeBlacklist": {
          "title": "Scope Blacklist",
          "description": "Suggestions will not be provided for scopes matching this list. See: https://pulsar-edit.dev/docs/launch-manual/sections/behind-pulsar/#scoped-settings-scopes-and-scope-descriptors",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          },
          "order": 7
        },
        "includeCompletionsFromAllBuffers": {
          "title": "Include Completions From All Buffers",
          "description": "For grammars with no registered provider(s), the default provider will include completions from all buffers, instead of just the buffer you are currently editing.",
          "type": "boolean",
          "default": true,
          "order": 8
        },
        "strictMatching": {
          "title": "Use Strict Matching For Built-In Provider",
          "description": "Fuzzy searching is performed if this is disabled; if it is enabled, suggestions must begin with the prefix from the current word.",
          "type": "boolean",
          "default": false,
          "order": 9
        },
        "minimumWordLength": {
          "description": "Only autocomplete when you've typed at least this many characters. Note: May not affect external providers.",
          "type": "integer",
          "default": 3,
          "order": 10
        },
        "extraWordCharacters": {
          "description": "Characters to consider part of words for the purpose of autocomplete, even if they are included in the editor.nonWordCharacters setting",
          "type": "string",
          "default": "",
          "order": 10.5
        },
        "enableBuiltinProvider": {
          "title": "Enable Built-In Provider",
          "description": "The package comes with a built-in provider that will provide suggestions using the words in your current buffer or all open buffers. You will get better suggestions by installing additional autocomplete+ providers. To stop using the built-in provider, disable this option.",
          "type": "boolean",
          "default": true,
          "order": 11
        },
        "builtinProviderBlacklist": {
          "title": "Built-In Provider Blacklist",
          "description": "Don't use the built-in provider for these selector(s).",
          "type": "string",
          "default": ".source.gfm",
          "order": 12
        },
        "backspaceTriggersAutocomplete": {
          "title": "Allow Backspace To Trigger Autocomplete",
          "description": "If enabled, typing `backspace` will show the suggestion list if suggestions are available. If disabled, suggestions will not be shown while backspacing.",
          "type": "boolean",
          "default": false,
          "order": 13
        },
        "enableAutoConfirmSingleSuggestion": {
          "title": "Automatically Confirm Single Suggestion",
          "description": "If enabled, automatically insert suggestion on manual activation with 'autocomplete-plus:activate' when there is only one match.",
          "type": "boolean",
          "default": true,
          "order": 14
        },
        "suggestionListFollows": {
          "title": "Suggestions List Follows",
          "description": "With 'Cursor' the suggestion list appears at the cursor's position. With 'Word' it appears at the beginning of the word that's being completed.",
          "type": "string",
          "default": "Word",
          "enum": [
            "Word",
            "Cursor"
          ],
          "order": 15
        },
        "suppressActivationForEditorClasses": {
          "title": "Suppress Activation For Editor Classes",
          "description": "Don't auto-activate when any of these classes are present in the editor.",
          "type": "array",
          "default": [
            "vim-mode.command-mode",
            "vim-mode.visual-mode",
            "vim-mode.operator-pending-mode"
          ],
          "items": {
            "type": "string"
          },
          "order": 17
        },
        "consumeSuffix": {
          "title": "Consume suggestion text following the cursor",
          "description": "Completing a suggestion consumes text following the cursor matching the suffix of the chosen suggestion.",
          "type": "boolean",
          "default": true,
          "order": 18
        },
        "useLocalityBonus": {
          "description": "Gives words near the cursor position a higher score than those far away",
          "type": "boolean",
          "default": true,
          "order": 20
        },
        "enableExtendedUnicodeSupport": {
          "description": "Identifies non-latin alphabet characters as letters",
          "type": "boolean",
          "default": false,
          "order": 21
        },
        "similarSuggestionRemoval": {
          "description": "Should similar suggestions be removed from the list? If so how to determine they are similar.",
          "type": "string",
          "default": "none",
          "enum": [
            {
              "value": "none",
              "description": "Do not remove similar suggestions"
            },
            {
              "value": "textOrSnippet",
              "description": "Remove when the insertion text or snippet match"
            }
          ],
          "order": 22
        },
        "moveToCancel": {
          "description": "Moving up when the first item is selected or down when the last item is selected cancels the suggestion list.",
          "type": "boolean",
          "default": false,
          "order": 23
        }
      }
    }
  },
  "autocomplete-snippets": {
    "readme": "# autocomplete+ snippet suggestions package\r\n\r\nAdds snippets to autocomplete+ suggestions\r\n\r\n## Features\r\n\r\n* Adds user snippets and language snippets to the autocomplete+ suggestions list\r\n",
    "metadata": {
      "name": "autocomplete-snippets",
      "main": "./lib/autocomplete-snippets",
      "version": "1.12.1",
      "description": "Adds snippets to autocomplete+ suggestions",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": ">=0.174.0 <2.0.0"
      },
      "providedServices": {
        "autocomplete.provider": {
          "versions": {
            "2.0.0": "provide"
          }
        }
      },
      "consumedServices": {
        "snippets": {
          "versions": {
            "0.1.0": "consumeSnippets"
          }
        }
      }
    }
  },
  "autoflow": {
    "readme": "# Autoflow package\r\n\r\nFormat the current selection to have lines no longer than 80 characters using `cmd-alt-q` on macOS and `ctrl-shift-q` on Windows and Linux. If nothing is selected, the current paragraph will be reflowed.\r\n\r\nThis package uses the config value of `editor.preferredLineLength` when set to determine desired line length.\r\n",
    "metadata": {
      "name": "autoflow",
      "version": "0.29.4",
      "main": "./lib/autoflow",
      "description": "Format the current selection to have lines no longer than 80 characters.\n\nThis packages uses the config value of `editor.preferredLineLength` when set.",
      "activationCommands": {
        "atom-text-editor": [
          "autoflow:reflow-selection"
        ]
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": "*"
      },
      "dependencies": {
        "underscore-plus": "^1.7.0"
      }
    }
  },
  "autosave": {
    "readme": "# Autosave package\r\n\r\nAutosaves editor when they lose focus, are destroyed, or when the window is closed.\r\n\r\nThis package is disabled by default and can be enabled via the `autosave.enabled` config\r\nsetting or by checking *Enabled* in the settings for the *autosave* package in the\r\nSettings view.\r\n\r\n## Service API\r\nThe service exposes an object with a function `dontSaveIf`, which accepts a callback.\r\nCallbacks will be invoked with each pane item eligible for an autosave and if the callback\r\nreturns true, the item will be skipped.\r\n\r\n### Usage\r\n\r\n#### package.json\r\n``` json\r\n\"consumedServices\": {\r\n  \"autosave\": {\r\n    \"versions\": {\r\n      \"1.0.0\": \"consumeAutosave\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### package initialize\r\n``` javascript\r\nconsumeAutosave({dontSaveIf}) {\r\n  dontSaveIf(paneItem -> paneItem.getPath() === '/dont/autosave/me.coffee')\r\n}\r\n```\r\n",
    "metadata": {
      "name": "autosave",
      "main": "./lib/autosave",
      "version": "0.24.6",
      "private": true,
      "description": "Save editors when they lose focus or are closed",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "engines": {
        "atom": ">0.27.0"
      },
      "providedServices": {
        "autosave": {
          "description": "A configuration object to control what is autosaved",
          "versions": {
            "1.0.0": "provideService"
          }
        }
      },
      "configSchema": {
        "enabled": {
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "background-tips": {
    "readme": "## Background Tips package\r\n\r\nDisplays tips about Pulsar in the background when there are no open editors.\r\n\r\n![Screen shot](https://f.cloud.github.com/assets/69169/1796267/c3de038c-6a60-11e3-8bf8-36f45684902c.png)\r\n",
    "metadata": {
      "name": "background-tips",
      "main": "./lib/background-tips",
      "version": "0.28.1",
      "private": true,
      "description": "Displays tips about Pulsar in the background when there are no editors open.",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": ">0.42.0"
      },
      "dependencies": {
        "underscore-plus": "1.x"
      }
    }
  },
  "base16-tomorrow-dark-theme": {
    "readme": "# Base16 Tomorrow Dark Syntax theme\r\n\r\nPulsar theme using the ever popular [Base16 Tomorrow](https://web.archive.org/web/20220806075017/https://chriskempson.com/projects/base16/) dark colors.\r\n\r\n![Base16 Tomorrow light](https://cloud.githubusercontent.com/assets/378023/10118589/f108a568-64b6-11e5-8438-eb34dc9b40a1.png)\r\n\r\n\r\n## Install\r\n\r\nThis theme is installed by default with Pulsar and can be activated by going to the _Themes_ section in the Settings view (`cmd-,`) and selecting it from the _Syntax Themes_ drop-down menu.\r\n\r\nA\r\n[light version](../base16-tomorrow-light-theme) of this theme is also available.\r\n",
    "metadata": {
      "name": "base16-tomorrow-dark-theme",
      "theme": "syntax",
      "version": "1.6.0",
      "description": "Base16 dark theme developed for Atom, repurposed for Pulsar",
      "keywords": [
        "base16",
        "dark",
        "syntax"
      ],
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": ">0.49.0"
      }
    }
  },
  "base16-tomorrow-light-theme": {
    "readme": "# Base16 Tomorrow Light Syntax theme\r\n\r\nPulsar theme using the ever popular [Base16 Tomorrow](https://web.archive.org/web/20220806075017/https://chriskempson.com/projects/base16/) light colors.\r\n\r\n![Base16 Tomorrow light](https://cloud.githubusercontent.com/assets/378023/10118588/f1002474-64b6-11e5-9107-b6bedee9777a.png)\r\n\r\n\r\n## Install\r\n\r\nThis theme is installed by default with Pulsar and can be activated by going to the _Themes_ section in the Settings view (`cmd-,`) and selecting it from the _Syntax Themes_ drop-down menu.\r\n\r\nA\r\n[dark version](../base16-tomorrow-dark-theme) of this theme is also available.\r\n",
    "metadata": {
      "name": "base16-tomorrow-light-theme",
      "theme": "syntax",
      "version": "1.6.0",
      "description": "Base16 light theme developed for Atom, repurposed for Pulsar",
      "keywords": [
        "base16",
        "light",
        "syntax"
      ],
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": ">0.49.0"
      }
    }
  },
  "bookmarks": {
    "readme": "# Bookmarks package\r\n\r\nBookmark lines in the editor.\r\n\r\n### Commands and Keybindings\r\n\r\n|Command|Description|Keybinding (Linux)|Keybinding (macOS)|Keybinding (Windows)|\r\n|-------|-----------|------------------|------------------|--------------------|\r\n|`bookmarks:toggle-bookmark`|Add/remove a bookmark on the current line|<kbd>ctrl-shift-f2</kbd>|<kbd>cmd-f2</kbd>|<kbd>alt-ctrl-f2</kbd>|\r\n|`bookmarks:clear-bookmarks`|Remove all bookmarks in the current editor|<kbd>alt-shift-f2</kbd>|<kbd>cmd-shift-f2</kbd>|<kbd>ctrl-shift-f2</kbd>|\r\n|`bookmarks:view-all`|View all the bookmarks|<kbd>ctrl-f2</kbd>|<kbd>ctrl-f2</kbd>|<kbd>ctrl-f2</kbd>|\r\n|`bookmarks:jump-to-next-bookmark`|Move the cursor to the next bookmark|<kbd>f2</kbd>|<kbd>f2</kbd>|<kbd>f2</kbd>|\r\n|`bookmarks:jump-to-previous-bookmark`|Move the cursor to the previous bookmark|<kbd>shift-f2</kbd>|<kbd>shift-f2</kbd>|<kbd>shift-f2</kbd>|\r\n|`bookmarks:select-to-next-bookmark`|Select the text to the next bookmark| | | |\r\n|`bookmarks:select-to-previous-bookmark`|Select the text to the previous bookmark| | | |\r\n\r\n![](https://cloud.githubusercontent.com/assets/1545996/10419203/97d75e32-7035-11e5-818f-5b34d60865c1.png)\r\n",
    "metadata": {
      "name": "bookmarks",
      "version": "0.46.0",
      "main": "./lib/main",
      "description": "Can mark lines, then jump back to them",
      "license": "MIT",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "engines": {
        "atom": "*"
      },
      "dependencies": {
        "atom-select-list": "^0.7.0"
      },
      "providedServices": {
        "bookmarks": {
          "description": "Provides a list of bookmarks to any package that wants to know about them.",
          "versions": {
            "1.0.0": "provideBookmarks"
          }
        }
      }
    }
  },
  "bracket-matcher": {
    "readme": "# Bracket Matcher package\r\n\r\nHighlights and jumps between `[]`, `()`, and `{}`. Also highlights matching XML\r\nand HTML tags.\r\n\r\nAutocompletes `[]`, `()`, `{}`, `\"\"`, `''`, `‚Äú‚Äù`, `‚Äò‚Äô`, `¬´¬ª`, `‚Äπ‚Ä∫`, and\r\nbackticks by default.\r\n\r\nUse <kbd>ctrl-m</kbd> to jump to the bracket matching the one adjacent to the cursor.\r\nIt jumps to the nearest enclosing bracket when there's no adjacent bracket,\r\n\r\nUse <kbd>ctrl-cmd-m</kbd> to select all the text inside the current brackets.\r\n\r\nUse <kbd>alt-cmd-.</kbd> to close the current XML/HTML tag.\r\n\r\n---\r\n### Configuration\r\n\r\nMatching brackets and quotes are sensibly inserted for you. If you dislike this\r\nfunctionality, you can disable it from the Bracket Matcher section of the\r\nSettings View.\r\n\r\n#### Custom Pairs\r\n\r\nYou can customize matching pairs in Bracket Matcher at any time. You can do so either globally via the Settings View or at the scope level via your `config.cson`. Changes take effect immediately.\r\n\r\n* **Autocomplete Characters** - Comma-separated pairs that the editor will treat as brackets / quotes. Entries in this field override the package defaults.\r\n  * For example: `<>, (), []`\r\n\r\n* **Pairs With Extra Newline** - Comma-separated pairs that enhance the editor's auto indent feature. When used, a newline is automatically added between the pair when enter is pressed between them. Note: This feature is meant to be used in combination with brackets defined for indentation by the active language package (`increaseIndentPattern` / `decreaseIndentPattern`).\r\nExample:\r\n```\r\nfn main() {\r\n    | <---- Cursor positioned at one indent level higher\r\n}\r\n```\r\n\r\n#### Scoped settings\r\nIn addition to the global settings, you are also able to add scope-specific modifications to Pulsar in your `config.cson`. This is especially useful for editor rule changes specific to each language. Scope-specific settings override package defaults _and_ global settings.\r\nExample:\r\n```cson\r\n\".rust.source\":\r\n  \"bracket-matcher\":\r\n    autocompleteCharacters: [\r\n      \"()\"\r\n      \"[]\"\r\n      \"{}\"\r\n      \"<>\"\r\n      \"\\\"\\\"\"\r\n      \"``\"\r\n    ]\r\n```\r\n",
    "metadata": {
      "name": "bracket-matcher",
      "version": "0.92.0",
      "main": "./lib/main",
      "description": "Highlight the matching bracket for the `(){}[]` character under the cursor. Move the cursor to the matching bracket with `ctrl-m`.",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": "*"
      },
      "dependencies": {
        "underscore-plus": "1.x"
      },
      "configSchema": {
        "autocompleteCharacters": {
          "description": "Autocompleted characters treated as matching pairs, such as `()`, and `{}`.",
          "type": "array",
          "default": [
            "()",
            "[]",
            "{}",
            "\"\"",
            "''",
            "``",
            "‚Äú‚Äù",
            "‚Äò‚Äô",
            "¬´¬ª",
            "‚Äπ‚Ä∫"
          ],
          "items": {
            "type": "string"
          }
        },
        "pairsWithExtraNewline": {
          "description": "Automatically add a newline between the pair when enter is pressed.",
          "type": "array",
          "default": [
            "()",
            "[]",
            "{}"
          ],
          "items": {
            "type": "string"
          }
        },
        "autocompleteBrackets": {
          "type": "boolean",
          "default": true,
          "description": "Autocomplete bracket and quote characters, such as `(` and `)`, and `\"`."
        },
        "wrapSelectionsInBrackets": {
          "type": "boolean",
          "default": true,
          "description": "Wrap selected text in brackets or quotes when the editor contains selections and the opening bracket or quote is typed."
        },
        "highlightMatchingLineNumber": {
          "type": "boolean",
          "default": false,
          "description": "Highlight the line number of the matching bracket."
        },
        "alwaysSkipClosingPairs": {
          "type": "boolean",
          "default": false,
          "description": "Always skip closing pairs in front of the cursor."
        }
      }
    }
  },
  "command-palette": {
    "readme": "# Command Palette package\r\n\r\nFind and run available commands using <kbd>cmd-shift-p</kbd> (macOS) or <kbd>ctrl-shift-p</kbd> (Linux/Windows) in Pulsar.\r\n\r\n![](https://f.cloud.github.com/assets/671378/2241354/2908b768-9ccd-11e3-9da1-a11753c0495d.png)\r\n",
    "metadata": {
      "name": "command-palette",
      "version": "0.43.5",
      "main": "./lib/command-palette-package",
      "description": "Find and run available commands using `cmd-shift-p` (macOS) or `ctrl-shift-p` (Linux/Windows).",
      "activationCommands": {
        "atom-workspace": [
          "command-palette:toggle"
        ]
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": "*"
      },
      "atomTestRunner": "atom-mocha-test-runner",
      "dependencies": {
        "atom-select-list": "^0.7.1",
        "underscore-plus": "^1.0.0"
      },
      "devDependencies": {
        "atom-mocha-test-runner": "^0.3.0",
        "event-kit": "^2.4.0",
        "semver": "^5.4.1",
        "sinon": "^3.2.1"
      },
      "configSchema": {
        "preserveLastSearch": {
          "type": "boolean",
          "default": false,
          "description": "Preserve the last search when reopening the command palette."
        }
      }
    }
  },
  "dalek": {
    "readme": "# dalek\r\n\r\n**EXTERMINATEs** core packages installed in `~/.pulsar/packages`.\r\n\r\n## Why worry?\r\n\r\nWhen people install core Pulsar packages as if they are community packages, it can cause many problems that are very hard to diagnose. This package is intended to notify people when they are in this precarious position so they can take corrective action.\r\n\r\n## I got a warning, what do I do?\r\n\r\n1. Note down the packages named in the notification\r\n2. Exit Pulsar\r\n3. Open a command prompt\r\n4. For each package named in the notification, execute `pulsar -p uninstall [package-name]`\r\n5. Start Pulsar again normally to verify that the warning notification no longer appears\r\n\r\n## I have more questions. Where can I ask them?\r\n\r\nPlease feel free to ask in any of our [Community Areas](https://pulsar-edit.dev/community.html).\r\n",
    "metadata": {
      "name": "dalek",
      "main": "./lib/main",
      "version": "0.2.2",
      "description": "EXTERMINATEs built-in packages installed in ~/.pulsar/packages",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "atomTestRunner": "./test/runner",
      "engines": {
        "atom": ">=1.12.7 <2.0.0"
      },
      "dependencies": {
        "grim": "^2.0.3"
      },
      "devDependencies": {
        "atom-mocha-test-runner": "^1.0.0",
        "sinon": "^15.2.0"
      }
    }
  },
  "deprecation-cop": {
    "readme": "# Deprecation Cop package\r\n\r\nShows a list of deprecated methods calls. Ideally it should show nothing!\r\n\r\n![https://github-images.s3.amazonaws.com/skitch/Deprecation_Cop_-__Users_corey_github_deprecation-cop-20140414-144618.jpg](https://github-images.s3.amazonaws.com/skitch/Deprecation_Cop_-__Users_corey_github_deprecation-cop-20140414-144618.jpg)\r\n",
    "metadata": {
      "name": "deprecation-cop",
      "main": "./lib/main",
      "version": "0.56.9",
      "description": "Shows a list of deprecated calls",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      },
      "dependencies": {
        "etch": "0.9.0",
        "fs-plus": "^3.0.0",
        "grim": "^2.0.1",
        "underscore-plus": "^1.7.0"
      },
      "consumedServices": {
        "status-bar": {
          "versions": {
            "^1.0.0": "consumeStatusBar"
          }
        }
      },
      "deserializers": {
        "DeprecationCopView": "deserializeDeprecationCopView"
      }
    }
  },
  "dev-live-reload": {
    "readme": "# Dev Live Reload package\r\n\r\nThis live reloads the Pulsar `.less` files. You edit styles and they are magically reflected in any running Pulsar windows. Magic! :tophat: :sparkles: :rabbit2:\r\n\r\nInstalled by default on Pulsar windows running in dev mode. Use the \"Application: Open Dev\" command to open a new dev mode window.\r\n\r\nUse <kbd>meta-shift-ctrl-r</kbd> to reload all core and package stylesheets.\r\n\r\nThis package is __experimental__, it does not handle the following:\r\n\r\n* File additions to a theme. New files will not be watched.\r\n\r\n![gif](https://f.cloud.github.com/assets/69169/1387004/d2dc45f2-3b84-11e3-877e-cac8c51e9702.gif)\r\n",
    "metadata": {
      "name": "dev-live-reload",
      "main": "./lib/main",
      "version": "0.48.1",
      "description": "Live reload Pulsar themes and packages.",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "dependencies": {
        "fs-plus": "^3.0.0"
      },
      "engines": {
        "atom": "*"
      }
    }
  },
  "encoding-selector": {
    "readme": "# Encoding Selector package\r\n\r\nPick the encoding in the editor using <kbd>ctrl-shift-U</kbd> or by clicking the current encoding name in the status bar.\r\n\r\n![screenshot](https://cloud.githubusercontent.com/assets/671378/4815579/1334d066-5ed8-11e4-8cce-a1734be09c8a.png)\r\n",
    "metadata": {
      "name": "encoding-selector",
      "version": "0.23.9",
      "main": "./lib/main",
      "description": "Select the encoding to use for the current editor with `ctrl-shift-U`.",
      "license": "MIT",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "engines": {
        "atom": ">=0.141.0"
      },
      "dependencies": {
        "atom-select-list": "^0.7.0",
        "iconv-lite": "^0.4.4",
        "jschardet": "^1.1.0"
      },
      "consumedServices": {
        "status-bar": {
          "versions": {
            "^1.0.0": "consumeStatusBar"
          }
        }
      }
    }
  },
  "exception-reporting": {
    "readme": "## Exception Reporting package\r\n\r\nReports uncaught exceptions in Pulsar to [bugsnag](https://bugsnag.com).\r\n",
    "metadata": {
      "name": "exception-reporting",
      "main": "./lib/main",
      "version": "0.43.1",
      "description": "Reports uncaught Pulsar exceptions to the Pulsar team via bugsnag.com",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": ">0.48.0"
      },
      "dependencies": {
        "node-uuid": "~1.4.7",
        "stack-trace": "0.0.9",
        "underscore-plus": "^1.7.0"
      },
      "devDependencies": {
        "semver": "^5.3.0"
      }
    }
  },
  "find-and-replace": {
    "readme": "# Find and Replace package\r\n\r\nFind and replace in the current buffer or across the entire project.\r\n\r\n## Find in buffer\r\n\r\nUsing the shortcut <kbd>cmd-f</kbd> (Mac) or <kbd>ctrl-f</kbd> (Windows and Linux).\r\n![screen shot 2013-11-26 at 12 25 22 pm](https://f.cloud.github.com/assets/69169/1625938/a859fa70-56d9-11e3-8b2a-ac37c5033159.png)\r\n\r\n## Find in project\r\n\r\nUsing the shortcut <kbd>cmd-shift-f</kbd> (Mac) or <kbd>ctrl-shift-f</kbd> (Windows and Linux).\r\n![screen shot 2013-11-26 at 12 26 02 pm](https://f.cloud.github.com/assets/69169/1625945/b216d7b8-56d9-11e3-8b14-6afc33467be9.png)\r\n\r\n## Provided Service\r\n\r\nIf you need access the marker layer containing result markers for a given editor, use the `find-and-replace@0.0.1` service. The service exposes one method, `resultsMarkerLayerForTextEditor`, which takes a `TextEditor` and returns a `TextEditorMarkerLayer` that you can interact with. Keep in mind that any work you do in synchronous event handlers on this layer will impact the performance of find and replace.\r\n",
    "metadata": {
      "name": "find-and-replace",
      "main": "./lib/find",
      "description": "Find and replace within buffers and across the project.",
      "version": "0.219.8",
      "license": "MIT",
      "activationCommands": {
        "atom-workspace": [
          "project-find:show",
          "project-find:toggle",
          "project-find:show-in-current-directory",
          "find-and-replace:show",
          "find-and-replace:toggle",
          "find-and-replace:find-all",
          "find-and-replace:find-next",
          "find-and-replace:find-previous",
          "find-and-replace:find-next-selected",
          "find-and-replace:find-previous-selected",
          "find-and-replace:use-selection-as-find-pattern",
          "find-and-replace:use-selection-as-replace-pattern",
          "find-and-replace:show-replace",
          "find-and-replace:replace-next",
          "find-and-replace:replace-all",
          "find-and-replace:select-next",
          "find-and-replace:select-all",
          "find-and-replace:clear-history"
        ]
      },
      "repository": "https://github.com/pulsar-edit/find-and-replace",
      "engines": {
        "atom": "*"
      },
      "dependencies": {
        "binary-search": "^1.3.3",
        "etch": "0.9.3",
        "fs-plus": "^3.0.0",
        "temp": "^0.8.3",
        "underscore-plus": "1.x"
      },
      "devDependencies": {
        "dedent": "^0.6.0"
      },
      "consumedServices": {
        "atom.file-icons": {
          "versions": {
            "1.0.0": "consumeFileIcons"
          }
        },
        "autocomplete.watchEditor": {
          "versions": {
            "1.0.0": "consumeAutocompleteWatchEditor"
          }
        },
        "file-icons.element-icons": {
          "versions": {
            "1.0.0": "consumeElementIcons"
          }
        }
      },
      "providedServices": {
        "find-and-replace": {
          "description": "Atom's bundled find-and-replace package",
          "versions": {
            "0.0.1": "provideService"
          }
        }
      },
      "configSchema": {
        "focusEditorAfterSearch": {
          "type": "boolean",
          "default": false,
          "description": "Focus the editor and select the next match when a file search is executed. If no matches are found, the editor will not be focused."
        },
        "projectSearchResultsPaneSplitDirection": {
          "type": "string",
          "default": "none",
          "enum": [
            "none",
            "right",
            "down"
          ],
          "title": "Direction to open results pane",
          "description": "Direction to split the active pane when showing project search results. If 'none', the results will be shown in the active pane."
        },
        "closeFindPanelAfterSearch": {
          "type": "boolean",
          "default": false,
          "title": "Close Project Find Panel After Search",
          "description": "Close the find panel after executing a project-wide search."
        },
        "scrollToResultOnLiveSearch": {
          "type": "boolean",
          "default": false,
          "title": "Scroll To Result On Live-Search (incremental find in buffer)",
          "description": "Scroll to and select the closest match while typing in the buffer find box."
        },
        "liveSearchMinimumCharacters": {
          "type": "integer",
          "default": 3,
          "minimum": 0,
          "description": "The minimum number of characters which need to be typed into the buffer find box before search starts matching and highlighting matches as you type."
        },
        "searchContextLineCountBefore": {
          "type": "integer",
          "default": 3,
          "minimum": 0,
          "description": "The number of extra lines of context to query before the match for project results"
        },
        "searchContextLineCountAfter": {
          "type": "integer",
          "default": 3,
          "minimum": 0,
          "description": "The number of extra lines of context to query after the match for project results"
        },
        "showSearchWrapIcon": {
          "type": "boolean",
          "default": true,
          "title": "Show Search Wrap Icon",
          "description": "Display a visual cue over the editor when looping through search results."
        },
        "useRipgrep": {
          "type": "boolean",
          "default": false,
          "title": "Use ripgrep",
          "description": "Use the experimental `ripgrep` search crawler. This will make searches substantially faster on large projects."
        },
        "enablePCRE2": {
          "type": "boolean",
          "default": false,
          "title": "Enable PCRE2 regex engine",
          "description": "Enable PCRE2 regex engine (applies only to `ripgrep` search). This will enable additional regex features such as lookbehind, but may make searches slower."
        },
        "autocompleteSearches": {
          "type": "boolean",
          "default": false,
          "title": "Autocomplete Search",
          "description": "Autocompletes entries in the find search field."
        },
        "preserveCaseOnReplace": {
          "type": "boolean",
          "default": false,
          "title": "Preserve Case During Replace",
          "description": "Keep the replaced text case during replace: replacing 'user' with 'person' will replace 'User' with 'Person' and 'USER' with 'PERSON'."
        }
      }
    }
  },
  "fuzzy-finder": {
    "readme": "# Fuzzy Finder package\r\n\r\nQuickly find and open files using <kbd>cmd/ctrl-t</kbd>.\r\n\r\n  * <kbd>cmd-t</kbd>/<kbd>cmd-p</kbd> *(macOS)* or <kbd>ctrl-t</kbd>/<kbd>ctrl-p</kbd> *(Linux/Windows)* to open the file finder\r\n  * <kbd>cmd-b</kbd> *(macOS)* or <kbd>ctrl-b</kbd> *(Linux/Windows)* to open the list of open buffers\r\n  * <kbd>cmd-shift-b</kbd> *(macOS)* or <kbd>ctrl-shift-b</kbd> *(Linux/Windows)* to open the list of Git modified and untracked files\r\n\r\nWhen opening a file, you can control the behavior.\r\n\r\n  * <kbd>enter</kbd> defaults to opening the selected file without leaving the current pane\r\n  * <kbd>shift-enter</kbd> defaults to switching to another pane if the file is already open there\r\n  * <kbd>cmd-k</kbd> <kbd>right</kbd> *(macOS)* or <kbd>ctrl-k</kbd> <kbd>right</kbd> *(Linux/Windows)* (or any other directional arrow) will open the highlighted file in a new pane on the side indicated by the arrow\r\n  * Adding `:<line number>` to the end of your search will go directly to the line number you specify, or the last line if the number is larger\r\n\r\nTurning on the \"Search All Panes\" setting reverses the behavior of <kbd>enter</kbd> and <kbd>shift-enter</kbd> so <kbd>enter</kbd> opens the file in any pane and <kbd>shift-enter</kbd> creates a new tab in the current pane.\r\n\r\nThis package uses both the `core.ignoredNames` and `fuzzy-finder.ignoredNames` config settings to filter out files and folders that will not be shown. Both of those config settings are interpreted as arrays of [minimatch](https://github.com/isaacs/minimatch) glob patterns.\r\n\r\nThis package also will also not show Git ignored files when the `core.excludeVcsIgnoredPaths` is enabled.\r\n\r\n![](https://f.cloud.github.com/assets/671378/2241456/100db6b8-9cd3-11e3-9b3a-569c6b50cc60.png)\r\n",
    "metadata": {
      "name": "fuzzy-finder",
      "version": "1.14.3",
      "main": "./lib/main",
      "description": "Open an editor to a file in the project with `cmd-t`.",
      "repository": "https://github.com/pulsar-edit/fuzzy-finder",
      "license": "MIT",
      "dependencies": {
        "atom-select-list": "^0.7.0",
        "fs-plus": "^3.0.0",
        "minimatch": "~3.0.3",
        "underscore-plus": "^1.7.0",
        "vscode-ripgrep": "^1.2.5",
        "wrench": "^1.5"
      },
      "devDependencies": {
        "async": "0.2.6",
        "temp": "~0.8.1",
        "sinon": "9.0.3"
      },
      "engines": {
        "atom": "*"
      },
      "consumedServices": {
        "teletype": {
          "versions": {
            "0.0.1": "consumeTeletype"
          }
        },
        "atom.file-icons": {
          "versions": {
            "1.0.0": "consumeFileIcons"
          }
        },
        "file-icons.element-icons": {
          "versions": {
            "1.0.0": "consumeElementIcons"
          }
        },
        "metrics-reporter": {
          "versions": {
            "^1.1.0": "consumeMetricsReporter"
          }
        }
      },
      "configSchema": {
        "ignoredNames": {
          "type": "array",
          "default": [],
          "description": "List of string glob patterns. Files and directories matching these patterns will be ignored. This list is merged with the list defined by the core `Ignored Names` config setting. Example: `.git, ._*, Thumbs.db`."
        },
        "searchAllPanes": {
          "type": "boolean",
          "default": false,
          "description": "Search all panes when opening files. If disabled, only the active pane is searched. Holding `shift` inverts this setting."
        },
        "preserveLastSearch": {
          "type": "boolean",
          "default": false,
          "description": "Remember the typed query when closing the fuzzy finder and use that as the starting query next time the fuzzy finder is opened."
        },
        "useRipGrep": {
          "type": "boolean",
          "default": true,
          "description": "Use the substantially faster `ripgrep` crawler."
        },
        "prefillFromSelection": {
          "type": "boolean",
          "default": false,
          "description": "Prefills search query with selected in current editor text"
        }
      }
    }
  },
  "git-diff": {
    "readme": "# Git Diff package\r\n\r\nMarks lines in the editor gutter that have been added, edited, or deleted since the last commit.\r\n\r\n  * <kbd>alt-g up</kbd> to move the cursor to the previous diff in the editor\r\n  * <kbd>alt-g down</kbd> to move the cursor to the next diff in the editor\r\n\r\n![](https://f.cloud.github.com/assets/671378/2241519/04791a24-9cd6-11e3-9a12-164cabe81d58.png)\r\n",
    "metadata": {
      "name": "git-diff",
      "version": "1.3.9",
      "main": "./lib/main",
      "description": "Marks lines in the editor gutter that have been added, edited, or deleted since the last commit.",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": "*"
      },
      "dependencies": {
        "atom-select-list": "^0.8.1"
      },
      "devDependencies": {
        "fs-plus": "^3.1.1",
        "temp": "^0.9.4"
      },
      "configSchema": {
        "showIconsInEditorGutter": {
          "type": "boolean",
          "default": false,
          "description": "Show colored icons for added (`+`), modified (`¬∑`) and removed (`-`) lines in the editor's gutter, instead of colored markers (`|`)."
        },
        "wrapAroundOnMoveToDiff": {
          "type": "boolean",
          "default": true,
          "description": "Wraps around to the first/last diff in the file when moving to next/previous diff."
        }
      }
    }
  },
  "go-to-line": {
    "readme": "# Go To Line package\r\n\r\nMove the cursor to a specific line in the editor using <kbd>ctrl-g</kbd>.\r\n\r\n![](https://f.cloud.github.com/assets/671378/2241602/fdd88c4c-9cd8-11e3-9d14-74844ec7da01.png)\r\n",
    "metadata": {
      "name": "go-to-line",
      "version": "0.33.0",
      "main": "./lib/go-to-line-view",
      "description": "Jump to a specific editor line number with `ctrl-g`.",
      "license": "MIT",
      "activationCommands": {
        "atom-text-editor": [
          "go-to-line:toggle"
        ]
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "engines": {
        "atom": "*"
      }
    }
  },
  "grammar-selector": {
    "readme": "# Grammar Selector package\r\n\r\nPick the grammar used for syntax highlighting using <kbd>ctrl-shift-L</kbd> or by clicking the current grammar name in the status bar.\r\n\r\n![](https://f.cloud.github.com/assets/671378/2241618/b7661f08-9cd9-11e3-8276-fe1c02955901.png)\r\n",
    "metadata": {
      "name": "grammar-selector",
      "version": "0.50.1",
      "main": "./lib/main",
      "description": "Select the grammar to use for the current editor with `ctrl-shift-L`.",
      "license": "MIT",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "engines": {
        "atom": "*"
      },
      "dependencies": {
        "atom-select-list": "^0.7.0"
      },
      "consumedServices": {
        "status-bar": {
          "versions": {
            "^1.0.0": "consumeStatusBar"
          }
        }
      },
      "configSchema": {
        "showOnRightSideOfStatusBar": {
          "type": "boolean",
          "default": true,
          "description": "Show the active pane item‚Äôs language on the right side of Pulsar‚Äôs status bar, instead of the left."
        },
        "hideDuplicateTextMateGrammars": {
          "type": "boolean",
          "default": true,
          "title": "Hide Duplicate Grammars",
          "description": "Hides non-preferred grammars when there is more than one grammar. When checked, whichever grammar is preferred for a given scope name (TextMate or Tree-sitter) will be the only one shown. When unchecked, all grammars will always be shown in the list, regardless of the user‚Äôs settings."
        }
      }
    }
  },
  "image-view": {
    "readme": "# Image View package\r\n\r\nOpen images in an editor in Pulsar. Support zooming via <kbd>cmd-+</kbd>, <kbd>cmd--</kbd>, and <kbd>cmd-0</kbd>.\r\n\r\n\r\nCurrently supports the following file extensions:\r\n\r\n  * `.bmp`\r\n  * `.gif`\r\n  * `.ico`\r\n  * `.jpeg`\r\n  * `.jpg`\r\n  * `.png`\r\n  * `.webp`\r\n\r\n![](https://f.cloud.github.com/assets/671378/2241669/7df82fec-9cdc-11e3-992d-f19a7235ebda.png)\r\n",
    "metadata": {
      "name": "image-view",
      "version": "0.64.0",
      "description": "Open images in an editor",
      "main": "./lib/main",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": "*"
      },
      "dependencies": {
        "bytes": "^3.0.0",
        "etch": "0.9.0"
      },
      "consumedServices": {
        "status-bar": {
          "versions": {
            "^1.0.0": "consumeStatusBar"
          }
        }
      },
      "deserializers": {
        "ImageEditor": "deserialize"
      }
    }
  },
  "incompatible-packages": {
    "readme": "# Incompatible Packages package\r\n\r\nDisplays a list of installed Pulsar packages that have native module\r\ndependencies that are not compatible with the current version of Pulsar.\r\n\r\n![](https://cloud.githubusercontent.com/assets/671378/3767534/3f099820-18ce-11e4-9fa0-feef7947aab2.png)\r\n",
    "metadata": {
      "name": "incompatible-packages",
      "main": "./lib/main",
      "version": "0.27.3",
      "description": "Show incompatible packages",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      },
      "dependencies": {
        "etch": "^0.12.2"
      },
      "consumedServices": {
        "status-bar": {
          "versions": {
            "^1.0.0": "consumeStatusBar"
          }
        }
      },
      "deserializers": {
        "IncompatiblePackagesComponent": "deserializeIncompatiblePackagesComponent"
      }
    }
  },
  "keybinding-resolver": {
    "readme": "# Keybinding Resolver package\r\n\r\nShows what commands a keybinding resolves to.\r\n\r\nYou can open and close the resolver using <kbd>Cmd+.</kbd> (macOS) or <kbd>Ctrl+.</kbd> (Linux and Windows).\r\n\r\nPlease note the clipboard icon which can be selected to copy the given keybinding\r\ndirective so that you can easily paste it into your keymap files.\r\n\r\n![](https://user-images.githubusercontent.com/4137660/44482876-8de73a80-a617-11e8-8bd5-24023c96b39e.png)\r\n",
    "metadata": {
      "name": "keybinding-resolver",
      "main": "./lib/main",
      "version": "0.39.1",
      "description": "Show what commands a keybinding resolves to",
      "license": "MIT",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "engines": {
        "atom": ">=1.17.0"
      },
      "deserializers": {
        "keybinding-resolver/KeyBindingResolverView": "deserializeKeyBindingResolverView"
      },
      "dependencies": {
        "etch": "0.9.0",
        "fs-plus": "^3.0.0",
        "temp": "^0.9.0"
      }
    }
  },
  "language-c": {
    "readme": "# C/C++ language support in Pulsar\r\n\r\nAdds syntax highlighting and snippets to C/C++ files in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate)\r\nfrom the [C TextMate bundle](https://github.com/textmate/c.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a\r\npull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "version": "0.60.20",
      "name": "language-c",
      "description": "Atom language support for C/C++",
      "keywords": [
        "tree-sitter"
      ],
      "main": "lib/main",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": "*",
        "node": ">=12"
      },
      "dependencies": {
        "tree-sitter-c": "0.20.2",
        "tree-sitter-cpp": "0.20.0"
      },
      "consumedServices": {
        "hyperlink.injection": {
          "versions": {
            "0.1.0": "consumeHyperlinkInjection"
          }
        },
        "todo.injection": {
          "versions": {
            "0.1.0": "consumeTodoInjection"
          }
        }
      }
    }
  },
  "language-clojure": {
    "readme": "# Clojure language support in Pulsar\r\n\r\nAdds syntax highlighting to Clojure files in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate)\r\nfrom the [Clojure TextMate bundle](https://github.com/mmcgrana/textmate-clojure).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a pull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-clojure",
      "version": "0.22.8",
      "description": "Clojure language support in Atom",
      "main": "lib/main",
      "engines": {
        "atom": "*",
        "node": ">=12"
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "configSchema": {
        "dismissTag": {
          "type": "boolean",
          "default": true,
          "description": "Highlights forms after #_ as comments"
        },
        "commentTag": {
          "type": "boolean",
          "default": false,
          "description": "Highlights forms like (comment ...) as comments"
        },
        "markDeprecations": {
          "type": "boolean",
          "default": true,
          "description": "Marks deprecations like `use`"
        }
      }
    }
  },
  "language-coffee-script": {
    "readme": "# CoffeeScript language support in Pulsar\r\n\r\nAdds syntax highlighting and snippets to CoffeeScript files in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate) from the [CoffeeScript TextMate bundle](https://github.com/jashkenas/coffee-script-tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a pull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "version": "0.50.0",
      "name": "language-coffee-script",
      "description": "CoffeeScript language support in Atom",
      "license": "MIT",
      "engines": {
        "atom": "*",
        "node": "*"
      },
      "repository": "https://github.com/pulsar-edit/pulsar"
    }
  },
  "language-csharp": {
    "readme": "# C# language support in Pulsar\r\n\r\nAdds syntax highlighting and snippets to C# files in Pulsar.\r\n\r\nThe C# grammar comes from the [.NET Foundation's C# grammar](https://github.com/dotnet/csharp-tmLanguage)\r\n\r\nContributions and issues with the the grammar should be raised upstream.\r\n",
    "metadata": {
      "name": "language-csharp",
      "version": "1.1.0",
      "private": true,
      "description": "C# language support for Atom",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "keywords": [
        "C#",
        "csharp",
        ".Net"
      ],
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      }
    }
  },
  "language-css": {
    "readme": "# CSS language support in Pulsar\r\n\r\nAdds syntax highlighting, completions, and snippets to CSS files in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate)\r\nfrom the [CSS TextMate bundle](https://github.com/textmate/css.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a\r\npull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-css",
      "description": "CSS support in Atom",
      "keywords": [
        "tree-sitter"
      ],
      "version": "0.45.4",
      "engines": {
        "atom": "*",
        "node": ">=14"
      },
      "main": "lib/main",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "dependencies": {
        "tree-sitter-css": "^0.19.0"
      },
      "consumedServices": {
        "hyperlink.injection": {
          "versions": {
            "0.1.0": "consumeHyperlinkInjection"
          }
        },
        "todo.injection": {
          "versions": {
            "0.1.0": "consumeTodoInjection"
          }
        }
      }
    }
  },
  "language-gfm": {
    "readme": "# GitHub flavored Markdown package\r\n\r\nAdds syntax highlighting and snippets to [GitHub flavored Markdown](https://help.github.com/articles/github-flavored-markdown) files in Pulsar.\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a pull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-gfm",
      "version": "0.90.8",
      "main": "lib/main",
      "description": "Syntax highlighting and snippets for GitHub Flavored Markdown (GFM).",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": "*"
      },
      "devDependencies": {
        "coffeescript": "^1.7.0"
      },
      "consumedServices": {
        "hyperlink.injection": {
          "versions": {
            "0.1.0": "consumeHyperlinkInjection"
          }
        }
      }
    }
  },
  "language-git": {
    "readme": "# Git editing support in Pulsar\r\n\r\nAdds syntax highlighting to Git commit, merge, and rebase messages edited in Pulsar.\r\n\r\nYou can configure Pulsar to be your Git editor with the following command:\r\n\r\n```sh\r\ngit config --global core.editor \"pulsar --wait\"\r\n```\r\n\r\n## Commit message highlighting\r\n\r\nThis package uses warning and error highlighting to help bring attention to some violations of [standard conventions around commit message best practices](http://chris.beams.io/posts/git-commit/#seven-rules):\r\n\r\n1. If the subject line goes beyond 50 characters and again if it goes beyond 72 characters\r\n1. If the subject line begins with a lower-case letter (emoji at the beginning of the subject line won't be highlighted)\r\n1. If the subject line ends with a period\r\n1. If any non-comment body line goes beyond 72 characters\r\n\r\n## Diff highlighting\r\n\r\nIf [language-diff](https://web.pulsar-edit.dev/packages/language-diff) is installed, the\r\ndiff part of `git commit --verbose` messages is highlighted as well.\r\n\r\n## Background\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate) from the [Git TextMate bundle](https://github.com/textmate/git.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a pull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-git",
      "version": "0.19.1",
      "description": "Git editing support in Atom",
      "engines": {
        "atom": "*",
        "node": "*"
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT"
    }
  },
  "language-go": {
    "readme": "# Go language support in Pulsar\r\n\r\nAdds syntax highlighting and snippets to Go files in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate) from the [Go TextMate bundle](https://github.com/rsms/Go.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a pull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-go",
      "description": "Go language support in Atom",
      "main": "lib/main",
      "keywords": [
        "tree-sitter"
      ],
      "version": "0.47.3",
      "license": "MIT",
      "engines": {
        "atom": "*",
        "node": ">=14"
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "dependencies": {
        "tree-sitter-go": "0.19.1"
      },
      "consumedServices": {
        "hyperlink.injection": {
          "versions": {
            "0.1.0": "consumeHyperlinkInjection"
          }
        },
        "todo.injection": {
          "versions": {
            "0.1.0": "consumeTodoInjection"
          }
        }
      }
    }
  },
  "language-html": {
    "readme": "# HTML language support in Pulsar\r\n\r\nAdds syntax highlighting and snippets to HTML files in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate)\r\nfrom the [HTML TextMate bundle](https://github.com/textmate/html.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a\r\npull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-html",
      "main": "lib/main",
      "version": "0.53.1",
      "description": "HTML language support in Atom",
      "keywords": [
        "tree-sitter"
      ],
      "engines": {
        "atom": "*",
        "node": ">=14"
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "dependencies": {
        "atom-grammar-test": "^0.6.3",
        "tree-sitter-embedded-template": "0.19.0",
        "tree-sitter-html": "0.19.0"
      },
      "devDependencies": {
        "dedent": "^0.7.0"
      },
      "consumedServices": {
        "hyperlink.injection": {
          "versions": {
            "0.1.0": "consumeHyperlinkInjection"
          }
        },
        "todo.injection": {
          "versions": {
            "0.1.0": "consumeTodoInjection"
          }
        }
      }
    }
  },
  "language-hyperlink": {
    "readme": "# Hyperlink colorization in Pulsar\r\n\r\nAdds syntax highlighting to hyperlinks embedded in strings, comments, and plain\r\ntext in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate)\r\nfrom the [Hyperlink Helper TextMate bundle](https://github.com/textmate/hyperlink-helper.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a\r\npull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-hyperlink",
      "version": "0.17.1",
      "main": "lib/main",
      "description": "Hyperlink colorization in Atom",
      "engines": {
        "atom": "*",
        "node": ">=14"
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "providedServices": {
        "hyperlink.injection": {
          "versions": {
            "0.1.0": "provideHyperlinkInjection"
          }
        }
      }
    }
  },
  "language-java": {
    "readme": "# Java language support in Pulsar\r\n\r\nAdd syntax highlighting and snippets to Java/JSP files in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate) from the [Java TextMate bundle](https://github.com/textmate/java.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a pull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-java",
      "main": "lib/main",
      "version": "0.32.1",
      "description": "Java language support in Atom",
      "engines": {
        "atom": "*",
        "node": ">=14"
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "dependencies": {
        "tree-sitter-java": "0.19.1"
      },
      "consumedServices": {
        "hyperlink.injection": {
          "versions": {
            "0.1.0": "consumeHyperlinkInjection"
          }
        },
        "todo.injection": {
          "versions": {
            "0.1.0": "consumeTodoInjection"
          }
        }
      }
    }
  },
  "language-javascript": {
    "readme": "# JavaScript language support in Pulsar\r\n\r\nAdds syntax highlighting and snippets for JavaScript in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate)\r\nfrom the [JavaScript TextMate bundle](https://github.com/textmate/javascript.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a\r\npull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-javascript",
      "version": "0.134.2",
      "description": "JavaScript language support in Atom",
      "engines": {
        "atom": "*",
        "node": ">=16"
      },
      "main": "lib/main",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "keywords": [
        "tree-sitter"
      ],
      "dependencies": {
        "tree-sitter-javascript": "0.19.0",
        "tree-sitter-jsdoc": "0.19.0",
        "tree-sitter-regex": "0.19.0"
      },
      "configSchema": {
        "indentation": {
          "title": "Indentation",
          "type": "object",
          "properties": {
            "indentBraces": {
              "title": "Indent Curly Braces",
              "type": "boolean",
              "default": true,
              "order": 1,
              "description": "Indent after `{`."
            },
            "indentBrackets": {
              "title": "Indent Brackets",
              "type": "boolean",
              "default": true,
              "order": 2,
              "description": "Indent after `[`."
            },
            "indentParentheses": {
              "title": "Indent Parentheses",
              "type": "boolean",
              "default": true,
              "order": 3,
              "description": "Indent after `(`."
            },
            "alignCaseWithSwitch": {
              "title": "Align ‚Äúcase‚Äù With ‚Äùswitch‚Äù",
              "type": "boolean",
              "default": false,
              "order": 4,
              "description": "When enabled, `case` and `default` statements in `switch` blocks will match the indent level of the enclosing `switch` instead of indenting themselves one level."
            },
            "indentAfterBracelessIf": {
              "title": "Indent After Braceless ‚Äúif‚Äù And ‚Äúelse‚Äù",
              "type": "boolean",
              "default": true,
              "order": 5,
              "description": "When enabled, `if` and `else` statements without a brace on the initial line will trigger an indent, then a dedent after a single statement. Disable if your brace style is incompatible with this pattern."
            },
            "addHangingIndentAfterLogicalOperators": {
              "title": "Add Hanging Indent After Logical Operators",
              "type": "boolean",
              "default": true,
              "order": 6,
              "description": "When enabled, will add a hanging indent when a line ends with `&&` or `||`, continuing the indent until the end of the statement."
            },
            "addHangingIndentAfterTernaryOperators": {
              "title": "Add Hanging Indent After Ternary Operators",
              "type": "boolean",
              "default": true,
              "order": 7,
              "description": "When enabled, will add a hanging indent when a line ends with `?`, continuing the indent through the ensuing `:` until the end of the statement."
            }
          }
        }
      },
      "consumedServices": {
        "hyperlink.injection": {
          "versions": {
            "0.1.0": "consumeHyperlinkInjection"
          }
        },
        "todo.injection": {
          "versions": {
            "0.1.0": "consumeTodoInjection"
          }
        }
      }
    }
  },
  "language-json": {
    "readme": "# JSON language support in Pulsar\r\n\r\nAdds syntax highlighting of JSON files in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate) from the [JSON TextMate bundle](https://github.com/textmate/json.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a pull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-json",
      "main": "lib/main",
      "version": "1.0.5",
      "description": "JSON language support in Atom",
      "engines": {
        "atom": "*",
        "node": ">=12"
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "dependencies": {
        "tree-sitter-json": "0.20.0"
      }
    }
  },
  "language-less": {
    "readme": "# Less language support in Pulsar\r\n\r\nAdds syntax highlighting to [Less](http://lesscss.org) files in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate) from the [Less TextMate bundle](https://github.com/textmate/less.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a pull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-less",
      "version": "0.34.3",
      "description": "Less language support in Atom",
      "license": "MIT",
      "engines": {
        "atom": "*",
        "node": "*"
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "devDependencies": {
        "bluebird": "^2.9.25",
        "season": "^6.0.2",
        "superagent": "^8.0.9"
      }
    }
  },
  "language-make": {
    "readme": "# Make language support in Pulsar\r\n\r\nAdds syntax highlighting to [Makefiles](https://www.gnu.org/software/make/manual/make.html) in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate) from the [Make TextMate bundle](https://github.com/textmate/make.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a pull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-make",
      "version": "0.23.0",
      "description": "Make language support in Atom",
      "engines": {
        "atom": "*",
        "node": "*"
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT"
    }
  },
  "language-mustache": {
    "readme": "# Mustache/Handlebars support in Pulsar\r\n\r\nAdds syntax highlighting to [Mustache](http://mustache.github.io) and [Handlebars](http://handlebarsjs.com) files in Pulsar.\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a pull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-mustache",
      "version": "0.14.5",
      "description": "Mustache language support in Atom",
      "license": "MIT",
      "engines": {
        "atom": "*",
        "node": "*"
      },
      "repository": "https://github.com/pulsar-edit/pulsar"
    }
  },
  "language-objective-c": {
    "readme": "# Objective-C language support in Pulsar\r\n\r\nAdds syntax highlighting and snippets to Objective-C files in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate) from the [Objective-C TextMate bundle](https://github.com/textmate/objective-c.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a pull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-objective-c",
      "version": "0.16.0",
      "description": "Objective-C language support in Atom",
      "engines": {
        "atom": "*",
        "node": "*"
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT"
    }
  },
  "language-perl": {
    "readme": "# Perl language support in Pulsar\r\n\r\nAdds syntax highlighting and snippets to Perl files in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate) from the [Perl TextMate bundle](https://github.com/textmate/perl.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a pull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-perl",
      "version": "0.38.1",
      "description": "Perl language support in Atom",
      "engines": {
        "atom": "*",
        "node": "*"
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT"
    }
  },
  "language-php": {
    "readme": "# PHP language support in Pulsar\r\n\r\nAdds syntax highlighting and snippets to PHP files in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate) from the [PHP TextMate bundle](https://github.com/textmate/php.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a pull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-php",
      "version": "0.48.1",
      "main": "lib/main",
      "description": "PHP language support in Atom",
      "engines": {
        "atom": "*",
        "node": ">=12"
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "consumedServices": {
        "hyperlink.injection": {
          "versions": {
            "0.1.0": "consumeHyperlinkInjection"
          }
        },
        "todo.injection": {
          "versions": {
            "0.1.0": "consumeTodoInjection"
          }
        }
      }
    }
  },
  "language-property-list": {
    "readme": "# Property list support in Pulsar\r\n\r\nAdds syntax highlighting and snippets to [plist](https://en.wikipedia.org/wiki/Property_list)\r\nfiles in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate)\r\nfrom the [Property List TextMate bundle](https://github.com/textmate/property-list.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a\r\npull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-property-list",
      "version": "0.9.1",
      "description": "Property List support in Atom",
      "engines": {
        "atom": "*",
        "node": "*"
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT"
    }
  },
  "language-python": {
    "readme": "# Python language support in Pulsar\r\n\r\nAdds syntax highlighting and snippets to Python files in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate) from the [Python TextMate bundle](https://github.com/textmate/python.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a pull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-python",
      "main": "lib/main",
      "version": "0.53.6",
      "engines": {
        "atom": "*",
        "node": ">=12"
      },
      "description": "Python language support in Atom",
      "keywords": [
        "tree-sitter"
      ],
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "dependencies": {
        "atom-grammar-test": "^0.6.4",
        "tree-sitter-python": "0.19.0"
      },
      "consumedServices": {
        "hyperlink.injection": {
          "versions": {
            "0.1.0": "consumeHyperlinkInjection"
          }
        },
        "todo.injection": {
          "versions": {
            "0.1.0": "consumeTodoInjection"
          }
        }
      }
    }
  },
  "language-ruby": {
    "readme": "# Ruby language support in Pulsar\r\n\r\nAdds syntax highlighting and snippets to Ruby files in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate) from the [Ruby TextMate bundle](https://github.com/textmate/ruby.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a pull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-ruby",
      "version": "0.73.0",
      "description": "Ruby language support in Atom",
      "keywords": [
        "tree-sitter"
      ],
      "engines": {
        "atom": "*",
        "node": ">=12"
      },
      "main": "lib/main",
      "license": "MIT",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "dependencies": {
        "tree-sitter-regex": "^0.19.0",
        "tree-sitter-ruby": "^0.19.0"
      },
      "devDependencies": {
        "dedent": "^0.7.0"
      },
      "consumedServices": {
        "hyperlink.injection": {
          "versions": {
            "0.1.0": "consumeHyperlinkInjection"
          }
        },
        "todo.injection": {
          "versions": {
            "0.1.0": "consumeTodoInjection"
          }
        }
      }
    }
  },
  "language-ruby-on-rails": {
    "readme": "# Ruby on Rails language support in Pulsar\r\n\r\nAdds syntax highlighting and snippets to Rails files in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate) from the [Ruby on Rails TextMate bundle](https://github.com/drnic/ruby-on-rails-tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a pull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-ruby-on-rails",
      "version": "0.25.3",
      "description": "Ruby on Rails language support in Atom",
      "license": "MIT",
      "engines": {
        "atom": "*",
        "node": "*"
      },
      "repository": "https://github.com/pulsar-edit/pulsar"
    }
  },
  "language-rust-bundled": {
    "readme": "# language-rust-bundled\r\n\r\nThis package provides Rust syntax highlighting in Atom based on syntax trees provided by [tree-sitter-rust](https://github.com/tree-sitter/tree-sitter-rust).\r\n",
    "metadata": {
      "name": "language-rust-bundled",
      "version": "0.1.1",
      "description": "Rust support for Pulsar",
      "keywords": [
        "language",
        "grammar",
        "rust"
      ],
      "main": "lib/main.js",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "dependencies": {
        "tree-sitter-rust": "0.20.1"
      },
      "engines": {
        "atom": ">=1.0.0 <2.0.0",
        "node": ">=12"
      },
      "consumedServices": {
        "hyperlink.injection": {
          "versions": {
            "0.1.0": "consumeHyperlinkInjection"
          }
        },
        "todo.injection": {
          "versions": {
            "0.1.0": "consumeTodoInjection"
          }
        }
      }
    }
  },
  "language-sass": {
    "readme": "# Sass/SCSS language support in Pulsar\r\n\r\nAdds syntax highlighting and snippets to Sass/SCSS files in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate) from the [Sass TextMate bundle](https://github.com/alexsancho/SASS.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a pull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-sass",
      "version": "0.62.2",
      "main": "lib/main",
      "description": "Sass/SCSS language support in Atom",
      "license": "MIT",
      "engines": {
        "atom": "*",
        "node": ">=12"
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "devDependencies": {
        "dedent": "^0.7.0"
      },
      "consumedServices": {
        "hyperlink.injection": {
          "versions": {
            "0.1.0": "consumeHyperlinkInjection"
          }
        },
        "todo.injection": {
          "versions": {
            "0.1.0": "consumeTodoInjection"
          }
        }
      }
    }
  },
  "language-shellscript": {
    "readme": "# ShellScript language support in Pulsar\r\n\r\nAdds syntax highlighting and snippets to shell scripts in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate) from the [ShellScript TextMate bundle](https://github.com/textmate/shellscript.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a pull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-shellscript",
      "version": "0.28.2",
      "main": "lib/main",
      "description": "ShellScript language support in Atom",
      "keywords": [
        "tree-sitter"
      ],
      "engines": {
        "atom": "*",
        "node": ">=12"
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "dependencies": {
        "tree-sitter-bash": "0.19.0"
      },
      "consumedServices": {
        "hyperlink.injection": {
          "versions": {
            "0.1.0": "consumeHyperlinkInjection"
          }
        },
        "todo.injection": {
          "versions": {
            "0.1.0": "consumeTodoInjection"
          }
        }
      }
    }
  },
  "language-source": {
    "readme": "# Source code support in Pulsar\r\n\r\nAdds basic comment, indent, and outdent patterns used as a fallback by all\r\nsource files in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate)\r\nfrom the [Source TextMate bundle](https://github.com/textmate/source.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a\r\npull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-source",
      "version": "0.9.0",
      "engines": {
        "atom": "*",
        "node": "*"
      },
      "description": "Source code support in Atom",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT"
    }
  },
  "language-sql": {
    "readme": "# SQL language support in Pulsar\r\n\r\nAdds syntax highlighting to SQL files in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate) from the [SQL TextMate bundle](https://github.com/textmate/sql.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a pull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-sql",
      "version": "0.25.10",
      "description": "SQL language support in Atom",
      "engines": {
        "atom": "*",
        "node": "*"
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT"
    }
  },
  "language-text": {
    "readme": "# Plain text support in Pulsar\r\n\r\nGrammar and snippets for plain text files in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate)\r\nfrom the [Text TextMate bundle](https://github.com/textmate/text.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a\r\npull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-text",
      "version": "0.7.4",
      "description": "Plain text support in Atom",
      "engines": {
        "atom": "*",
        "node": "*"
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT"
    }
  },
  "language-todo": {
    "readme": "# TODO support in Pulsar\r\n\r\nAdds syntax highlighting to `TODO`, `FIXME`, `CHANGED`, `XXX`, `IDEA`, `HACK`, `NOTE`, `REVIEW`, `NB`, `BUG`, `QUESTION`, `COMBAK`, `TEMP`, `DEBUG`, `OPTIMIZE`, and `WARNING` in comments\r\nand text in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate) from the [TODO TextMate bundle](https://github.com/textmate/todo.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a pull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-todo",
      "version": "0.29.4",
      "main": "lib/main",
      "description": "TODO/FIXME highlighting support in Atom",
      "engines": {
        "atom": "*",
        "node": ">=14"
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "providedServices": {
        "todo.injection": {
          "versions": {
            "0.1.0": "provideTodoInjection"
          }
        }
      }
    }
  },
  "language-toml": {
    "readme": "# TOML language support in Pulsar\r\n\r\nAdds syntax highlighting for [TOML](https://github.com/toml-lang/toml) in Pulsar.\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a pull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-toml",
      "version": "0.20.0",
      "main": "lib/main",
      "description": "Syntax highlighting for Tom's Obvious, Minimal Language (TOML).",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": "*",
        "node": ">=14"
      },
      "devDependencies": {
        "tree-sitter-toml": "^0.5.1"
      },
      "consumedServices": {
        "hyperlink.injection": {
          "versions": {
            "0.1.0": "consumeHyperlinkInjection"
          }
        },
        "todo.injection": {
          "versions": {
            "0.1.0": "consumeTodoInjection"
          }
        }
      }
    }
  },
  "language-typescript": {
    "readme": "# TypeScript language support in Pulsar\r\n\r\nAdds syntax highlighting and snippets for TypeScript in Pulsar.\r\n\r\nThe grammar is the [Microsoft TypeScript TextMate grammar](https://github.com/Microsoft/TypeScript-TmLanguage) and copied here on a semi-regular basis.  Any issues relating to syntax highlighting are likely to be there.\r\n",
    "metadata": {
      "name": "language-typescript",
      "version": "0.6.4",
      "description": "TypeScript language support in Atom",
      "keywords": [
        "tree-sitter"
      ],
      "engines": {
        "atom": ">=1.19.1",
        "node": ">=12"
      },
      "main": "lib/main",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "dependencies": {
        "tree-sitter-typescript": "0.20.1"
      },
      "configSchema": {
        "indentation": {
          "title": "Indentation",
          "type": "object",
          "properties": {
            "indentBraces": {
              "title": "Indent Curly Braces",
              "type": "boolean",
              "default": true,
              "order": 1,
              "description": "Indent after `{`."
            },
            "indentBrackets": {
              "title": "Indent Brackets",
              "type": "boolean",
              "default": true,
              "order": 2,
              "description": "Indent after `[`."
            },
            "indentParentheses": {
              "title": "Indent Parentheses",
              "type": "boolean",
              "default": true,
              "order": 3,
              "description": "Indent after `(`."
            },
            "alignCaseWithSwitch": {
              "title": "Align ‚Äúcase‚Äù With ‚Äùswitch‚Äù",
              "type": "boolean",
              "default": false,
              "order": 4,
              "description": "When enabled, `case` and `default` statements in `switch` blocks will match the indent level of the enclosing `switch` instead of indenting themselves one level."
            },
            "indentAfterBracelessIf": {
              "title": "Indent After Braceless ‚Äúif‚Äù And ‚Äúelse‚Äù",
              "type": "boolean",
              "default": true,
              "order": 5,
              "description": "When enabled, `if` and `else` statements without a brace on the initial line will trigger an indent, then a dedent after a single statement. Disable if your brace style is incompatible with this pattern."
            },
            "addHangingIndentAfterLogicalOperators": {
              "title": "Add Hanging Indent After Logical Operators",
              "type": "boolean",
              "default": true,
              "order": 6,
              "description": "When enabled, will add a hanging indent when a line ends with `&&` or `||`, continuing the indent until the end of the statement."
            },
            "addHangingIndentAfterTernaryOperators": {
              "title": "Add Hanging Indent After Ternary Operators",
              "type": "boolean",
              "default": true,
              "order": 7,
              "description": "When enabled, will add a hanging indent when a line ends with `?`, continuing the indent through the ensuing `:` until the end of the statement."
            }
          }
        }
      },
      "consumedServices": {
        "hyperlink.injection": {
          "versions": {
            "0.1.0": "consumeHyperlinkInjection"
          }
        },
        "todo.injection": {
          "versions": {
            "0.1.0": "consumeTodoInjection"
          }
        }
      }
    }
  },
  "language-xml": {
    "readme": "# XML language support in Pulsar\r\n\r\nAdds syntax highlighting and snippets to XML files in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate) from the [XML TextMate bundle](https://github.com/textmate/xml.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a pull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-xml",
      "version": "0.35.3",
      "description": "XML language support in Atom",
      "engines": {
        "atom": "*",
        "node": "*"
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT"
    }
  },
  "language-yaml": {
    "readme": "# YAML language support in Pulsar\r\n\r\nAdds syntax highlighting to YAML files in Pulsar.\r\n\r\nOriginally [converted](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#converting-from-textmate) from the [YAML TextMate bundle](https://github.com/textmate/yaml.tmbundle).\r\n\r\nContributions are greatly appreciated. Please fork this repository and open a pull request to add snippets, make grammar tweaks, etc.\r\n",
    "metadata": {
      "name": "language-yaml",
      "version": "0.32.0",
      "main": "lib/main",
      "description": "YAML language support in Atom",
      "engines": {
        "atom": "*",
        "node": ">=12"
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "consumedServices": {
        "hyperlink.injection": {
          "versions": {
            "0.1.0": "consumeHyperlinkInjection"
          }
        },
        "todo.injection": {
          "versions": {
            "0.1.0": "consumeTodoInjection"
          }
        }
      }
    }
  },
  "line-ending-selector": {
    "readme": "# Line Ending Selector package\r\n\r\n![status bar tile](https://cloud.githubusercontent.com/assets/1305617/9274149/6b317568-4293-11e5-83ba-614a6c0d9890.png)\r\n\r\nThis is an [Pulsar](https://pulsar-edit.dev) package that displays the current line ending type of a file: `CRLF` (Windows), `LF` (Unix), or `Mixed` (both). It also lets you change the line ending of a file.\r\n\r\n## To Use\r\n\r\nWhen the package is activated it will show the current line ending of the file in the right side of the status-bar. If a new file is created the line ending will start with the system default: `CRLF` for Windows, `LF` for Mac and Linux, and `CR` for old-style Mac files. If a file contains multiple line-ending types it will display `Mixed`.\r\n\r\n### Changing a File's Line Ending\r\n\r\nYou can click the line ending in the status-bar to open a modal with the line ending options. Selecting a different line ending will change each line of the file in the active editor.\r\n\r\n![modal](https://cloud.githubusercontent.com/assets/1305617/9273907/2be5c136-4291-11e5-94af-65ece408eb12.png)\r\n\r\n**Line Endings**\r\n\r\n- `LF` is \"\\n\"\r\n- `CRLF` is \"\\r\\n\"\r\n\r\n**Note:** Because the `CR` line ending style is not used in any modern operating system, this package only supports converting *from* `CR` line endings not to it.\r\n\r\n### Pulsar Commands\r\n\r\nYou can also change a file's line endings by using or <kbd>cmd-shift-P</kbd> searching for these commands:\r\n\r\n```text\r\nline-ending-selector:convert-to-LF\r\nline-ending-selector:convert-to-CRLF\r\n```\r\n",
    "metadata": {
      "name": "line-ending-selector",
      "version": "0.7.7",
      "main": "./lib/main",
      "description": "Select the line ending to use for the current editor.",
      "license": "MIT",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "engines": {
        "atom": "^1.0.0"
      },
      "dependencies": {
        "atom-select-list": "^0.7.0",
        "underscore-plus": "^1.7.0"
      },
      "consumedServices": {
        "status-bar": {
          "versions": {
            "^1.0.0": "consumeStatusBar"
          }
        }
      },
      "configSchema": {
        "defaultLineEnding": {
          "title": "Default line ending",
          "description": "Line ending to use for new files",
          "type": "string",
          "default": "OS Default",
          "enum": [
            "OS Default",
            "LF",
            "CRLF"
          ]
        }
      }
    }
  },
  "link": {
    "readme": "# Link package\r\n\r\nOpens http(s) links under the cursor.\r\n\r\n### Commands and Keybindings\r\n\r\n|Command|Selector|Description|Keybinding (Linux)|Keybinding (macOS)|Keybinding (Windows)|\r\n|-------|--------|-----------|------------------|------------------|--------------------|\r\n|`link:open`|`atom-text-editor`|Opens the http(s) link under the cursor||<kbd>ctrl-shift-o</kbd>||\r\n\r\nCustom keybindings can be added by referencing the above commands.  To learn more, visit the [Using Pulsar: Basic Customization](https://pulsar-edit.dev/docs/launch-manual/sections/using-pulsar/#basic-customization) or [Behind Pulsar: Keymaps In-Depth](https://pulsar-edit.dev/docs/launch-manual/sections/behind-pulsar#keymaps-in-depth) sections of the Pulsar documentation.\r\n",
    "metadata": {
      "name": "link",
      "version": "0.31.6",
      "main": "./lib/link",
      "description": "Opens http(s) links under the cursor",
      "license": "MIT",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "engines": {
        "atom": "*"
      },
      "activationCommands": {
        "atom-workspace": [
          "link:open"
        ]
      },
      "dependencies": {
        "underscore-plus": "^1.7.0"
      }
    }
  },
  "markdown-preview": {
    "readme": "# Markdown Preview package\r\n\r\nShow the rendered HTML markdown to the right of the current editor using <kbd>ctrl-shift-m</kbd>.\r\n\r\nIt is currently enabled for `.markdown`, `.md`, `.mdown`, `.mkd`, `.mkdown`, `.ron`, and `.txt` files.\r\n\r\n![markdown-preview](https://cloud.githubusercontent.com/assets/378023/10013086/24cad23e-6149-11e5-90e6-663009210218.png)\r\n\r\n## Customize\r\n\r\nBy default Markdown Preview uses the colors of the active syntax theme. Enable **Use GitHub.com Style** in the __package settings__ to make it look closer to how markdown files get rendered on github.com.\r\n\r\n![markdown-preview GitHub style](https://cloud.githubusercontent.com/assets/378023/10013087/24ccc7ec-6149-11e5-97ea-53a842a715ea.png)\r\n\r\nWhen **Use GitHub.com Style** is selected, you can further customize the theme of the Markdown preview with the **GitHub.com Style Mode** setting. Since the GitHub website has a light theme and a dark theme, `markdown-preview` allows you to choose which theme to use when previewing your files. By default, it will use whatever mode is preferred by your system, but you can opt into ‚ÄúLight‚Äù or ‚ÄúDark‚Äù to force it to use a particular theme.\r\n\r\nNo matter which theme you use, you can apply further customizations in your `styles.less` file. For example:\r\n\r\n```css\r\n.markdown-preview pre {\r\n  background-color: #444;\r\n}\r\n```\r\n\r\n## Language identifiers in fenced code blocks\r\n\r\nA detailed Markdown specification helps to ensure that Markdown is displayed consistently across multiple parsers. Sadly, the same isn‚Äôt true of code block language identifiers ‚Äî¬†the strings you use to tell the renderer what sort of code is inside a code block.\r\n\r\nThe CommonMark specification [explicitly avoids standardizing these identifiers](https://spec.commonmark.org/0.31.2/#info-string):\r\n\r\n> The first word of the info string is typically used to specify the language of the code sample, and rendered in the class attribute of the code tag. However, this spec does not mandate any particular treatment of the info string.\r\n\r\nThere are several valid ways to infer specific languages from language identifiers such as `js`, `less`, `coffee`,  and `c`. This package supports the following systems, configured via the **Syntax Highlighting Language Identifiers** setting:\r\n\r\n  * [Linguist](https://github.com/github-linguist/linguist): Used by GitHub (previously the default and only language identification system).\r\n  * [Chroma](https://github.com/alecthomas/chroma): Used by CodeBerg/Gitea/Hugo/Goldmark.\r\n  * [Rouge](https://github.com/rouge-ruby/rouge): Used by GitLab/Jekyll.\r\n  * [HighlightJS](https://highlightjs.org/): Used in a number of places, but most relevantly on the [Pulsar Package Registry](https://web.pulsar-edit.dev/) website.\r\n\r\nIf none of these systems meets your needs, you may specify custom language identifiers. This may not be as portable as the systems described above, but it will at least produce the desired outcome on your own system.\r\n\r\nThe setting **Custom Syntax Highlighting Language Identifiers** lets you define a list of custom language identifiers that match up to languages available within your Pulsar installation.\r\n\r\nFor example, if you wanted to map `j` to JavaScript and `p` to Python, you‚Äôd add the following text to the **Custom Syntax Highlighting Language Identifiers** field:\r\n\r\n```\r\nj: source.js, p: source.python\r\n```\r\n\r\nNow `markdown-preview` will understand what to do with fenced code blocks that begin with <code>\\`\\`\\`j</code> or <code>\\`\\`\\`p</code>. These custom identifiers will work alongside whatever system you‚Äôve chosen with **Syntax Highlighting Language Identifiers**, but will supersede that system in the event of conflict.\r\n",
    "metadata": {
      "name": "markdown-preview",
      "version": "0.160.2",
      "main": "./lib/main",
      "description": "Open a rendered version of the Markdown in the current editor with `ctrl-shift-m`.",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": "*",
        "node": ">=12"
      },
      "scripts": {
        "generate-github-markdown-css": "node scripts/generate-github-markdown-css.js"
      },
      "dependencies": {
        "cheerio": "^1.0.0-rc.3",
        "dedent": "^1.5.3",
        "dompurify": "^2.0.17",
        "emoji-images": "^0.1.1",
        "fs-plus": "^3.0.0",
        "github-markdown-css": "^5.5.1",
        "marked": "5.0.3",
        "morphdom": "^2.7.2",
        "underscore-plus": "^1.0.0",
        "yaml-front-matter": "^4.1.1"
      },
      "devDependencies": {
        "temp": "^0.8.1"
      },
      "deserializers": {
        "MarkdownPreviewView": "createMarkdownPreviewView"
      },
      "configSchema": {
        "breakOnSingleNewline": {
          "type": "boolean",
          "order": 1,
          "default": false,
          "description": "In Markdown, a single newline character doesn't cause a line break in the generated HTML. In GitHub Flavored Markdown, that is not true. Enable this config option to insert line breaks in rendered HTML for single newlines in Markdown source."
        },
        "liveUpdate": {
          "type": "boolean",
          "order": 2,
          "default": true,
          "description": "Re-render the preview as the contents of the source changes, without requiring the source buffer to be saved. If disabled, the preview is re-rendered only when the buffer is saved to disk."
        },
        "openPreviewInSplitPane": {
          "order": 3,
          "type": "boolean",
          "default": true,
          "description": "Open the preview in a split pane. If disabled, the preview is opened in a new tab in the same pane."
        },
        "allowUnsafeProtocols": {
          "order": 4,
          "type": "boolean",
          "default": false,
          "description": "Allow HTML attributes to use protocols normally considered unsafe such as `file://` and absolute paths on Windows."
        },
        "grammars": {
          "order": 0,
          "type": "array",
          "default": [
            "source.gfm",
            "source.litcoffee",
            "text.html.basic",
            "text.md",
            "text.plain",
            "text.plain.null-grammar"
          ],
          "description": "List of scopes for languages for which previewing is enabled. See [this README](https://github.com/pulsar-edit/spell-check#readme) for more information on finding the correct scope for a specific language."
        },
        "useGitHubStyle": {
          "order": 5,
          "title": "Use GitHub.com Style",
          "type": "boolean",
          "default": false,
          "description": "Use the same CSS styles for preview as the ones used on GitHub.com."
        },
        "gitHubStyleMode": {
          "order": 6,
          "title": "GitHub.com Style Mode",
          "type": "string",
          "default": "auto",
          "description": "Whether to use light-mode GitHub CSS, dark-mode GitHub CSS, or system default (based on your operating system preferences). Has no effect unless **Use GitHub.com Style** is enabled.",
          "enum": [
            {
              "value": "auto",
              "description": "System Default"
            },
            {
              "value": "light",
              "description": "Light"
            },
            {
              "value": "dark",
              "description": "Dark"
            }
          ]
        },
        "syntaxHighlightingLanguageIdentifier": {
          "order": 7,
          "title": "Syntax Highlighting Language Identifiers",
          "description": "Syntax Highlighting System to use for code block language identification. See [the README](https://github.com/pulsar-edit/pulsar/tree/master/packages/markdown-preview#readme) for details.",
          "type": "string",
          "default": "linguist",
          "enum": [
            {
              "value": "linguist",
              "description": "Linguist: GitHub"
            },
            {
              "value": "chroma",
              "description": "Chroma: CodeBerg/Gitea/Hugo/Goldmark"
            },
            {
              "value": "rouge",
              "description": "Rouge: GitLab/Jekyll"
            },
            {
              "value": "highlightjs",
              "description": "HighlightJS: Markdown-IT"
            }
          ]
        },
        "customSyntaxHighlightingLanguageIdentifiers": {
          "description": "Comma-separated list of syntax language identifiers to map to any language. See [the README](https://github.com/pulsar-edit/pulsar/tree/master/packages/markdown-preview#readme) for usage.",
          "type": "string",
          "default": ""
        },
        "useOriginalParser": {
          "description": "When checked, will use the original Markdown parser for `markdown-preview` (`marked`). When unchecked, will use the new Markdown parser built into Pulsar (`markdown-it`).",
          "type": "boolean",
          "default": true
        }
      }
    }
  },
  "notifications": {
    "readme": " # Notifications package\r\n\r\n![notifications](https://cloud.githubusercontent.com/assets/69169/5176406/350d0e80-73fd-11e4-8101-1776b9d6d8bf.gif)\r\n\r\n### Docs\r\n\r\nNotifications are available for use in your Pulsar packages via the `atom.notifications` `NotificationManager` object. See\r\nhttps://atom.io/docs/api/latest/NotificationManager and https://atom.io/docs/api/latest/Notification for documentation.\r\n",
    "metadata": {
      "name": "notifications",
      "main": "./lib/main",
      "version": "0.73.0",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "description": "A tidy way to display Pulsar notifications.",
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      },
      "dependencies": {
        "fs-plus": "^3.0.0",
        "moment": "^2.19.3",
        "semver": "^7.0.0",
        "stacktrace-parser": "^0.1.3",
        "temp": "^0.8.1"
      },
      "devDependencies": {
        "coffeelint": "^1.9.7"
      },
      "configSchema": {
        "showErrorsInDevMode": {
          "type": "boolean",
          "default": false,
          "description": "Show notifications for uncaught exceptions even if Pulsar is running in dev mode. If this config setting is disabled, uncaught exceptions will trigger the dev tools to open and be logged in the console tab."
        },
        "defaultTimeout": {
          "type": "integer",
          "default": 5000,
          "minimum": 1000,
          "description": "The default notification timeout for a non-dismissable notification."
        }
      },
      "deserializers": {
        "notifications/NotificationsLog": "createLog"
      }
    }
  },
  "one-dark-syntax": {
    "readme": "## One Dark Syntax theme\r\n\r\n![one-dark-syntax](https://user-images.githubusercontent.com/238929/40553597-5f741518-6000-11e8-9068-70dfc5008b54.png)\r\n\r\n> The font used in the screenshot is [Fira Mono](https://github.com/mozilla/Fira).\r\n\r\nThere is also a matching [UI theme](https://atom.io/themes/one-dark-ui).\r\n\r\n### Install\r\n\r\nThis theme is installed by default with Pulsar and can be activated by going to the __Settings > Themes__ section and selecting it from the __Syntax Themes__ drop-down menu.\r\n",
    "metadata": {
      "name": "one-dark-syntax",
      "theme": "syntax",
      "version": "1.8.4",
      "description": "A dark syntax theme",
      "keywords": [
        "dark",
        "blue",
        "syntax"
      ],
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      }
    }
  },
  "one-dark-ui": {
    "readme": "## One Dark UI theme\r\n\r\nA dark UI theme that adapts to most syntax themes.\r\n\r\n![One dark UI](https://cloud.githubusercontent.com/assets/378023/26246818/08255b76-3cd6-11e7-9f6d-6ae3e16a89a9.png)\r\n\r\n> The font used in the screenshot is [Fira Mono](https://github.com/mozilla/Fira).\r\n\r\n\r\n### Install\r\n\r\nThis theme comes bundled with Pulsar and can be activated by going to the __Settings > Themes__ section and selecting \"One Dark\" from the __UI Themes__ drop-down menu.\r\n\r\n\r\n### Settings\r\n\r\nIn the theme settings you can:\r\n\r\n- Change the __Font Size__ to scale the whole UI up or down.\r\n- Choose between 3 __Tab Sizing__ modes.\r\n- Hide the  __dock buttons__.\r\n\r\nTo make changes, go to `Settings > Themes > One Dark UI > Settings` or the cog icon next to the theme picker.\r\n\r\n\r\n### Customize\r\n\r\nIt's also possible to resize only certain areas by adding the following to your `styles.less` (Use DevTools to find the right selectors):\r\n\r\n```css\r\n.theme-one-dark-ui {\r\n  .tab-bar { font-size: 18px; }\r\n  .tree-view { font-size: 14px; }\r\n  .status-bar { font-size: 12px; }\r\n}\r\n```\r\n\r\n\r\n### FAQ\r\n\r\n__Why do the colors change when I switch Syntax themes?__\r\nThis UI theme uses the same background color as the chosen syntax theme. If that syntax theme has a light background color, it only uses its hue, but otherwise stays dark. This lets you use dark-light combos.\r\n",
    "metadata": {
      "name": "one-dark-ui",
      "theme": "ui",
      "version": "1.12.5",
      "description": "Pulsar One dark UI theme",
      "keywords": [
        "dark",
        "adaptive",
        "ui"
      ],
      "license": "MIT",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "main": "lib/main",
      "engines": {
        "atom": ">0.40.0"
      },
      "configSchema": {
        "fontSize": {
          "title": "Font Size",
          "description": "Change the font size for the UI.",
          "type": "integer",
          "default": 12,
          "enum": [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20
          ],
          "order": 1
        },
        "tabSizing": {
          "title": "Tab Sizing",
          "description": "In Even mode all tabs will be the same size. Great for quickly closing many tabs. In Maximum mode the tabs will expand to take up the full width. In Minimum mode the tabs will only take as little space as needed and also show longer file names.",
          "type": "string",
          "default": "Even",
          "enum": [
            "Even",
            "Maximum",
            "Minimum"
          ],
          "order": 2
        },
        "tabCloseButton": {
          "title": "Tab Close Button",
          "description": "Choose the position of the close button shown in tabs.",
          "type": "string",
          "default": "Right",
          "enum": [
            "Left",
            "Right"
          ],
          "order": 3
        },
        "hideDockButtons": {
          "title": "Hide dock toggle buttons",
          "description": "Note: When hiding the toggle buttons, opening a dock needs to be done by using the keyboard or other alternatives.",
          "type": "boolean",
          "default": "false",
          "order": 4
        },
        "stickyHeaders": {
          "title": "Make tree-view project headers sticky",
          "type": "boolean",
          "default": "false",
          "order": 5
        }
      }
    }
  },
  "one-light-syntax": {
    "readme": "## One Light Syntax theme\r\n\r\n![one-syntax-light](https://cloud.githubusercontent.com/assets/378023/7783214/c146b4e6-0174-11e5-8377-a57cf0274d5d.png)\r\n\r\n> The font used in the screenshot is [Fira Mono](https://github.com/mozilla/Fira).\r\n\r\nThere is also a matching [UI theme](../one-light-ui).\r\n\r\n### Install\r\n\r\nThis theme is installed by default with Pulsar and can be activated by going to the __Settings > Themes__ section and selecting it from the __Syntax Themes__ drop-down menu.\r\n",
    "metadata": {
      "name": "one-light-syntax",
      "theme": "syntax",
      "version": "1.8.4",
      "description": "One light syntax theme developed for Atom, repurposed for Pulsar",
      "keywords": [
        "light",
        "syntax"
      ],
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": ">0.40.0"
      }
    }
  },
  "one-light-ui": {
    "readme": "## One Light UI theme\r\n\r\nA light UI theme that adapts to most syntax themes.\r\n\r\n![One light UI](https://cloud.githubusercontent.com/assets/378023/26246819/0826f04e-3cd6-11e7-98eb-cd94bc48b090.png)\r\n\r\n> The font used in the screenshot is [Fira Mono](https://github.com/mozilla/Fira).\r\n\r\n\r\n### Install\r\n\r\nThis theme comes bundled with Pulsar and can be activated by going to the __Settings > Themes__ section and selecting \"One Light\" from the __UI Themes__ drop-down menu.\r\n\r\n\r\n### Settings\r\n\r\nIn the theme settings you can:\r\n\r\n- Change the __Font Size__ to scale the whole UI up or down.\r\n- Choose between 3 __Tab Sizing__ modes.\r\n- Hide the  __dock buttons__.\r\n\r\nTo make changes, go to `Settings > Themes > One Light UI > Settings` or the cog icon next to the theme picker.\r\n\r\n\r\n### Customize\r\n\r\nIt's also possible to resize only certain areas by adding the following to your `styles.less` (Use DevTools to find the right selectors):\r\n\r\n```css\r\n.theme-one-light-ui {\r\n  .tab-bar { font-size: 18px; }\r\n  .tree-view { font-size: 14px; }\r\n  .status-bar { font-size: 12px; }\r\n}\r\n```\r\n\r\n\r\n### FAQ\r\n\r\n__Why do the colors change when I switch Syntax themes.__\r\nThis UI theme uses the same background color as the chosen syntax theme. If that syntax theme has a dark background color, it only uses its hue, but otherwise stays light. This lets you use light-dark combos.\r\n",
    "metadata": {
      "name": "one-light-ui",
      "theme": "ui",
      "version": "1.12.5",
      "description": "One light UI theme developed for Atom, repurposed for Pulsar",
      "keywords": [
        "light",
        "adaptive",
        "ui"
      ],
      "license": "MIT",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "main": "lib/main",
      "engines": {
        "atom": ">0.40.0"
      },
      "configSchema": {
        "fontSize": {
          "title": "Font Size",
          "description": "Change the font size for the UI.",
          "type": "integer",
          "default": 12,
          "enum": [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20
          ],
          "order": 1
        },
        "tabSizing": {
          "title": "Tab Sizing",
          "description": "In Even mode all tabs will be the same size. Great for quickly closing many tabs. In Maximum mode the tabs will expand to take up the full width. In Minimum mode the tabs will only take as little space as needed and also show longer file names.",
          "type": "string",
          "default": "Even",
          "enum": [
            "Even",
            "Maximum",
            "Minimum"
          ],
          "order": 2
        },
        "tabCloseButton": {
          "title": "Tab Close Button",
          "description": "Choose the position of the close button shown in tabs.",
          "type": "string",
          "default": "Right",
          "enum": [
            "Left",
            "Right"
          ],
          "order": 3
        },
        "hideDockButtons": {
          "title": "Hide dock toggle buttons",
          "description": "Note: When hiding the toggle buttons, opening a dock needs to be done by using the keyboard or other alternatives.",
          "type": "boolean",
          "default": "false",
          "order": 4
        },
        "stickyHeaders": {
          "title": "Make tree-view project headers sticky",
          "type": "boolean",
          "default": "false",
          "order": 5
        }
      }
    }
  },
  "open-on-github": {
    "readme": "# Open on GitHub package\r\n\r\nProvides commands to quickly view the current file on GitHub.com (The Website).\r\n\r\n## Usage\r\n\r\nWhen editing a file in Pulsar, use the command palette or keyboard shortcuts to:\r\n\r\n- Open the file on github.com <kbd>alt-g, o</kbd>\r\n- Open the blame view for the file on github.com <kbd>alt-g, b</kbd>\r\n- Open the history view for the file on github.com <kbd>alt-g, h</kbd>\r\n- Open the issues view for the repository the file belongs to on github.com <kbd>alt-g, i</kbd>\r\n- Open the pull requests view for the repository the file belongs to on github.com <kbd>alt-g, p</kbd>\r\n- Open the compare page for the current branch on github.com <kbd>alt-g, r</kbd>\r\n- Copy the github.com URL for the currently selected lines <kbd>alt-g, c</kbd>\r\n\r\n![Command Palette](https://f.cloud.github.com/assets/671378/2241755/23cb72f8-9ce2-11e3-9109-36c76a030f6a.png)\r\n\r\n## Remote URL detection\r\n\r\nThe GitHub repository URL is guessed from the current branch and Git remote information. To override the defaults, you can use `git config` to set the remote and branch name:\r\n\r\n```\r\ngit config atom.open-on-github.remote upstream\r\ngit config atom.open-on-github.branch some-branch\r\n```\r\n\r\n---\r\n\r\nInspired by the [GitHub Tools package][github-tools] for Sublime Text 2.\r\n\r\n[github-tools]: https://github.com/temochka/sublime-text-2-github-tools\r\n",
    "metadata": {
      "name": "open-on-github",
      "version": "1.3.2",
      "main": "./lib/main",
      "description": "View the active file on github.com",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "activationCommands": {
        "atom-pane": [
          "open-on-github:blame",
          "open-on-github:branch-compare",
          "open-on-github:copy-url",
          "open-on-github:file",
          "open-on-github:file-on-master",
          "open-on-github:history",
          "open-on-github:issues",
          "open-on-github:pull-requests",
          "open-on-github:repository"
        ]
      },
      "engines": {
        "atom": "*"
      },
      "devDependencies": {
        "fs-plus": "^3.0.1",
        "temp": "^0.8.3"
      },
      "configSchema": {
        "includeLineNumbersInUrls": {
          "default": true,
          "type": "boolean",
          "description": "Include the line range selected in the editor when opening or copying URLs to the clipboard. When opened in the browser, the GitHub page will automatically scroll to the selected line range."
        }
      }
    }
  },
  "package-generator": {
    "readme": "# Package Generator package\r\n\r\nGenerates and opens a new sample package, language, or syntax theme in Pulsar.\r\n",
    "metadata": {
      "name": "package-generator",
      "version": "1.3.0",
      "main": "./lib/main",
      "description": "Generates and opens a new sample package, language, or syntax theme.",
      "license": "MIT",
      "activationCommands": {
        "atom-workspace": [
          "package-generator:generate-package",
          "package-generator:generate-language-package",
          "package-generator:generate-syntax-theme"
        ]
      },
      "dependencies": {
        "fs-plus": "^3.0.0",
        "temp": "^0.8.1",
        "underscore-plus": "^1.0.0"
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "engines": {
        "atom": "*"
      },
      "configSchema": {
        "createInDevMode": {
          "default": false,
          "type": "boolean",
          "description": "When disabled, generated packages are linked into Pulsar in both normal mode and dev mode. When enabled, generated packages are linked into Pulsar only in dev mode."
        },
        "packageSyntax": {
          "default": "javascript",
          "type": "string",
          "enum": [
            "coffeescript",
            "javascript"
          ],
          "description": "The syntax to generate packages with."
        }
      }
    }
  },
  "pulsar-updater": {
    "readme": "# Pulsar Updater\r\n\r\nUpdate utility for Pulsar. On launch of Pulsar, `pulsar-updater` will check for any new releases available via GitHub APIs. And if one is available will display a notification for the user to be able to install the new version.\r\n\r\nIf the user seems to have installed Pulsar manually, a link will be opened directly to the resource on GitHub, allowing the user to then download the correct file as needed, and install it. Otherwise if it seems the user has installed Pulsar via various recognized package managers, then Pulsar Updater will present a notification that an update is available, and provide the commands needed to preform the update themselves if they so wish.\r\n\r\nThis package is made to be minimally invasive, while still allowing users to be aware of new Pulsar versions without any manual effort.\r\n\r\nAdditionally, since the entire process of actually installation is done by the user, there is no need for complex Squirrel logic, or expensive certifications to allow Squirrel to work.\r\n\r\n## Command Palette\r\n\r\nIf a user would prefer to manually check for any updates available then the following commands are exposed from Pulsar Updater to do so:\r\n\r\n* `pulsar-updater:check-for-update`: Performs an update check and shows a notification if a newer version of Pulsar is available.\r\n* `pulsar-updater:clear-cache`: Clears the package's cache and forgets any requests to suppress update checking.\r\n\r\n## The Update Notification\r\n\r\nIf an update is available, the notification that is shown is intended to be as non-invasive as possible, providing a few possible options:\r\n\r\n* Dismiss this Version: This will remove the notification, and prevent an additional notification ever appearing for this version again. Bypassing any cache expirations.\r\n* Dismiss until next launch: This will remove the notification, but only until the next update check. Which happens automatically at launch, or otherwise can be invoked manually.\r\n* Download from GitHub: This option is only shown if the installation method was determined to be manually. And clicking it will open the GitHub page containing the specific version to update to.\r\n\r\n## Supported/Checked/Recognized for Installation Methods\r\n\r\nSince a major part of the functionality of this package is attempting to determine the installation method, it's important to list them all here:\r\n\r\n* Universal: Developer Mode\r\n* Universal: Safe Mode\r\n* Universal: Spec Mode\r\n* Universal: Developer Instance\r\n* Windows: Chocolatey Installation\r\n* Windows: winget Installation\r\n* Windows: User Installation\r\n* Windows: Machine Installation\r\n* Windows: Portable Installation\r\n* Linux: Flatpak Installation\r\n* Linux: Deb-Get Installation\r\n* Linux: Nix Installation\r\n* Linux: Homebrew Installation\r\n* Linux: Manual Installation\r\n* macOS: Homebrew Installation\r\n* macOS: Manual Installation\r\n\r\n## Known Issues\r\n\r\nIt's important to remember that this update system is in no way integrated with the rest of Pulsar. The toggles within Pulsar to update automatically are ignored. The About view will still be unable to alert of new versions, nor track progress on installation. Those systems should eventually be removed, or mothballed, in favour of this.\r\n",
    "metadata": {
      "name": "pulsar-updater",
      "version": "1.0.0",
      "description": "Detect Pulsar updates on Launch.",
      "main": "./src/main.js",
      "scripts": {
        "test": "pulsar --test spec"
      },
      "engines": {
        "atom": ">=1.106.0 <2.0.0"
      },
      "author": "confused-Techie",
      "license": "MIT",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "dependencies": {
        "event-kit": "github:pulsar-edit/event-kit",
        "shelljs": "^0.8.5",
        "superagent": "^8.0.9",
        "winreg": "^1.2.4"
      },
      "configSchema": {
        "checkForUpdatesOnLaunch": {
          "type": "boolean",
          "default": true,
          "description": "If Pulsar Updater should check for an update to Pulsar as soon as Pulsar launches."
        }
      }
    }
  },
  "settings-view": {
    "readme": "# Settings View package\r\n\r\nEdit core configuration settings, install and configure packages, and change themes from within Pulsar.\r\n\r\n![Settings View](https://cloud.githubusercontent.com/assets/118951/16886698/b0ca5fae-4a8a-11e6-8afc-2c03fda4618c.PNG)\r\n\r\n## Usage\r\nYou can open the Settings View by navigating to\r\n***LNX***: _Edit > Preferences_ -\r\n***MAC***: _Atom > Preferences_ -\r\n***WIN***: _File > Settings_.\r\n\r\nIn order to install new packages and themes, click on the _Install_ section on the left-hand side.\r\nOnce installed, community packages/themes and their settings are housed within their respective section.\r\nAll packages/themes that have updates will be listed under the _Updates_ section. Finally, all keybindings (including ones that community packages have added) are available in the _Keybindings_ section.\r\n\r\nWant to learn more? Check out the [Getting Started: Pulsar Basics](https://pulsar-edit.dev/docs/launch-manual/sections/getting-started/#pulsar-basics) and [Using Pulsar: Pulsar Packages](https://pulsar-edit.dev/docs/launch-manual/sections/using-pulsar/#pulsar-packages) sections in the Pulsar Launch Manual.\r\n\r\n### Commands and Keybindings\r\nAll of the following commands are under the `atom-workspace` selector.\r\n\r\n|Command|Description|Keybinding (Linux)|Keybinding (macOS)|Keybinding (Windows)|\r\n|-------|-----------|------------------|-----------------|--------------------|\r\n|`settings-view:open`|Opens the Settings View|<kbd>ctrl-,</kbd>|<kbd>cmd-,</kbd>|<kbd>ctrl-,</kbd>|\r\n|`settings-view:core`|Opens the _Core_ section of the Settings View|\r\n|`settings-view:editor`|Opens the _Editor_ section of the Settings View|\r\n|`settings-view:system`|Opens the _System_ section of the Settings View (Windows)|\r\n|`settings-view:show-keybindings`|Opens the _Keybindings_ section of the Settings View|\r\n|`settings-view:uninstall-packages`|Opens the _Packages_ section of the Settings View|\r\n|`settings-view:change-themes`|Opens the _Themes_ section of the Settings View|\r\n|`settings-view:uninstall-themes`|Opens the _Themes_ section of the Settings View|\r\n|`settings-view:check-for-updates`|Opens the _Updates_ section of the Settings View|\r\n|`settings-view:install-packages-and-themes`|Opens the _Install_ section of the Settings View|\r\nCustom keybindings can be added by referencing the above commands.  To learn more, visit the [Using Pulsar: Basic Customization](https://pulsar-edit.dev/docs/launch-manual/sections/using-pulsar/#basic-customization) or [Behind Pulsar: Keymaps In-Depth](https://pulsar-edit.dev/docs/launch-manual/sections/behind-pulsar/#keymaps-in-depth) sections in the Pulsar Launch Manual.\r\n\r\n## Customize\r\nThe Settings View package uses the `ui-variables` to match a theme's color scheme. You can still customize the UI in your `styles.less` file. For example:\r\n\r\n```less\r\n// Change the color of the titles\r\n.settings-view .section .section-heading {\r\n  color: white;\r\n}\r\n\r\n// Change the font size of the setting descriptions\r\n.settings-view .setting-description {\r\n  font-size: 13px;\r\n}\r\n```\r\n\r\nUse the [developer tools](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#developer-tools) to find more selectors.\r\n\r\n## Contributing\r\nAlways feel free to help out!  Whether it's [filing bugs and feature requests](https://github.com/pulsar-edit/pulsar/issues/new) or working on some of the [open issues](https://github.com/pulsar-edit/pulsar/issues), Pulsar's [contributing guide](https://github.com/pulsar-edit/.github/blob/main/CONTRIBUTING.md) will help get you started while the [guide for contributing to packages](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/#contributing-to-official-pulsar-packages) has some extra information.\r\n\r\n## License\r\nMIT License.  See [the license](https://github.com/pulsar-edit/pulsar/blob/master/LICENSE.md) for more details.\r\n",
    "metadata": {
      "name": "settings-view",
      "version": "0.261.11",
      "main": "./lib/main",
      "description": "Edit config settings, install packages, and change themes",
      "license": "MIT",
      "uriHandler": {
        "method": "handleURI",
        "deferActivation": false
      },
      "configSchema": {
        "packageUpdateConcurrency": {
          "title": "Maximum simultaneous package updates",
          "description": "Limit how many processes run simultaneously during package updates. If your machine slows down while updating many packages at once, set this value to a small positive number (e.g., `1` or `2`).",
          "type": "integer",
          "default": -1
        },
        "searchSettingsMinimumScore": {
          "title": "Search Settings Minimum Score to Display Results",
          "description": "Set the minimum similarity score required for a setting to appear in the search results, when searching for settings.",
          "type": "integer",
          "default": 2
        },
        "searchSettingsMetadata": {
          "title": "Display Search Settings Metadata along with Search Results",
          "description": "Whether or not to display search metadata with the search results. Metadata will appear as `{namespace}.{settingName}:{searchScore}`.",
          "type": "boolean",
          "default": false
        },
        "enableSettingsSearch": {
          "title": "Enable Experimental Settings Search Feature",
          "description": "Will enable or disable the new Experimental Settings Search.",
          "type": "boolean",
          "default": true
        },
        "showSettingsIconInStatusBar": {
          "title": "Show Settings Icon in Status Bar",
          "description": "Whether or not to show a settings icon in the Pulsar Status Bar.",
          "type": "boolean",
          "default": true
        }
      },
      "dependencies": {
        "async": "^3.2.0",
        "etch": "0.9.0",
        "fs-plus": "^3.0.0",
        "glob": "5.0.15",
        "hosted-git-info": "^2.8.9",
        "request": "^2.83.0",
        "season": "^6.0.2",
        "semver": "^5.3.0",
        "underscore-plus": "^1.0.6"
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "engines": {
        "atom": "*"
      },
      "consumedServices": {
        "status-bar": {
          "versions": {
            "^1.0.0": "consumeStatusBar"
          }
        },
        "snippets": {
          "versions": {
            "0.1.0": "consumeSnippets"
          }
        }
      },
      "deserializers": {
        "SettingsView": "createSettingsView"
      }
    }
  },
  "snippets": {
    "readme": "# Snippets package\r\n\r\nExpand snippets matching the current prefix with <kbd>tab</kbd> in Pulsar.\r\n\r\nTo add your own snippets, select the _Pulsar > Snippets..._ menu option if you're using macOS, or the _File > Snippets..._ menu option if you're using Windows, or the _Edit > Snippets..._ menu option if you are using Linux.\r\n\r\n## Snippet Format\r\n\r\nSnippets files are stored in a package's `snippets/` folder and also loaded from `~/.pulsar/snippets.cson`. They can be either `.json` or `.cson` file types.\r\n\r\n```coffee\r\n'.source.js':\r\n  'console.log':\r\n    'prefix': 'log'\r\n    'command': 'insert-console-log'\r\n    'body': 'console.log(${1:\"crash\"});$2'\r\n```\r\n\r\nThe outermost keys are the selectors where these snippets should be active, prefixed with a period (`.`) (details below).\r\n\r\nThe next level of keys are the snippet names. Because this is object notation, each snippet must have a different name.\r\n\r\nUnder each snippet name is a `body` to insert when the snippet is triggered.\r\n\r\n`$` followed by a number are the tabs stops which can be cycled between by pressing <kbd>Tab</kbd> once a snippet has been triggered.\r\n\r\nThe above example adds a `console.log` snippet to JavaScript files that would expand to:\r\n\r\n```js\r\nconsole.log(\"crash\");\r\n```\r\n\r\nThe string `\"crash\"` would be initially selected and pressing tab again would place the cursor after the `;`\r\n\r\nA snippet specifies how it can be triggered. Thus it must provide **at least one** of the following keys:\r\n\r\n### The ‚Äòprefix‚Äô key\r\n\r\nIf a `prefix` is defined, it specifies a string that can trigger the snippet. In the above example, typing `log` (as its own word) and then pressing <kbd>Tab</kbd> would replace `log` with the string `console.log(\"crash\")` as described above.\r\n\r\nPrefix completions can be suggested if partially typed thanks to the `autocomplete-snippets` package.\r\n\r\n### The ‚Äòcommand‚Äô key\r\n\r\nIf a `command` is defined, it specifies a command name that can trigger the snippet. That command can be invoked from the command palette or mapped to a keyboard shortcut via your `keymap.cson`.\r\n\r\nIf a package called `some-package` had defined that snippet, it would be available in the keymap as `some-package:insert-console-log`, or in the command palette as **Some Package: Insert Console Log**.\r\n\r\nIf you defined the `console.log` snippet described above in your own `snippets.cson`, it could be referenced in a keymap file as `snippets:insert-console-log`, or in the command palette as **Snippets: Insert Console Log**.\r\n\r\nInvoking the command would insert the snippet at the cursor, replacing any text that may be selected.\r\n\r\nSnippet command names must be unique. They can‚Äôt conflict with each other, nor can they conflict with any other commands that have been defined. If there is such a conflict, you‚Äôll see an error notification describing the problem.\r\n\r\n### Optional parameters\r\n\r\nThese parameters are meant to provide extra information about your snippet to [autocomplete-plus](https://github.com/atom/autocomplete-plus/wiki/Provider-API).\r\n\r\n* `leftLabel` will add text to the left part of the autocomplete results box.\r\n* `leftLabelHTML` will overwrite what's in `leftLabel` and allow you to use a bit of CSS such as `color`.\r\n* `rightLabelHTML`. By default, in the right part of the results box you will see the name of the snippet. When using `rightLabelHTML` the name of the snippet will no longer be displayed, and you will be able to use a bit of CSS.\r\n* `description` will add text to a description box under the autocomplete results list.\r\n* `descriptionMoreURL` URL to the documentation of the snippet.\r\n\r\n![autocomplete-description](http://i.imgur.com/cvI2lOq.png)\r\n\r\nExample:\r\n```coffee\r\n'.source.js':\r\n  'console.log':\r\n    'prefix': 'log'\r\n    'body': 'console.log(${1:\"crash\"});$2'\r\n    'description': 'Output data to the console'\r\n    'rightLabelHTML': '<span style=\"color:#ff0\">JS</span>'\r\n```\r\n\r\n### Determining the correct scope for a snippet\r\n\r\nThe outmost key of a snippet is the ‚Äúscope‚Äù that you want the descendent snippets to be available in. The key should be prefixed with a period (`text.html.basic` ‚Üí `.text.html.basic`). You can find out the correct scope by opening the Settings (<kbd>cmd-,</kbd> on macOS) and selecting the corresponding *Language [xxx]* package. For example, here‚Äôs the settings page for `language-html`:\r\n\r\n![Screenshot of Language Html settings](https://cloud.githubusercontent.com/assets/1038121/5137632/126beb66-70f2-11e4-839b-bc7e84103f67.png)\r\n\r\nIf it's difficult to determine the package handling the file type in question (for example, for `.md`-documents), you can use another approach:\r\n\r\n1. Put your cursor in a file in which you want the snippet to be available.\r\n2. Open the [Command Palette](https://github.com/pulsar-edit/command-palette)\r\n(<kbd>cmd-shift-p</kbd> or <kbd>ctrl-shift-p</kbd>).\r\n3. Run the `Editor: Log Cursor Scope` command.\r\n\r\nThis will trigger a notification which will contain a list of scopes. The first scope that's listed is the scope for that language. Here are some examples: `source.coffee`, `text.plain`, `text.html.basic`.\r\n\r\n## Snippet syntax\r\n\r\nThis package supports a subset of the features of TextMate snippets, [documented here](http://manual.macromates.com/en/snippets), as well as most features described in the [LSP specification][lsp] and [supported by VSCode][vscode].\r\n\r\nThe following features from TextMate snippets are not yet supported:\r\n\r\n* Interpolated shell code can‚Äôt reliably be supported cross-platform, and is probably a bad idea anyway. No other editors that support snippets have adopted this feature, and Pulsar won‚Äôt either.\r\n\r\nThe following features from VSCode snippets are not yet supported:\r\n\r\n* ‚ÄúChoice‚Äù syntax like `${1|one,two,three|}` requires that the autocomplete engine pop up a menu to offer the user a choice between the available placeholder options. This may be supported in the future, but right now Pulsar effectively converts this to `${1:one}`, treating the first choice as a conventional placeholder.\r\n\r\n### Variables\r\n\r\nPulsar snippets support all of the variables mentioned in the [LSP specification][lsp], plus many of the variables [supported by VSCode][vscode].\r\n\r\nVariables can be referenced with `$`, either without braces (`$CLIPBOARD`) or with braces (`${CLIPBOARD}`). Variables can also have fallback values (`${CLIPBOARD:http://example.com}`), simple flag-based transformations (`${CLIPBOARD:/upcase}`), or `sed`-style transformations (`${CLIPBOARD/ /_/g}`).\r\n\r\nOne of the most useful is `TM_SELECTED_TEXT`, which represents whatever text was selected when the snippet was invoked. (Naturally, this can only happen when a snippet is invoked via command or key shortcut, rather than by typing in a <kbd>Tab</kbd> trigger.)\r\n\r\nOthers that can be useful:\r\n\r\n* `TM_FILENAME`: The name of the current file (`foo.rb`).\r\n* `TM_FILENAME_BASE`: The name of the current file, but without its extension (`foo`).\r\n* `TM_FILEPATH`: The entire path on disk to the current file.\r\n* `TM_CURRENT_LINE`: The entire current line that the cursor is sitting on.\r\n* `TM_CURRENT_WORD`: The entire word that the cursor is within or adjacent to, as interpreted by `cursor.getCurrentWordBufferRange`.\r\n* `CLIPBOARD`: The current contents of the clipboard.\r\n* `CURRENT_YEAR`, `CURRENT_MONTH`, et cetera: referneces to the current date and time in various formats.\r\n* `LINE_COMMENT`, `BLOCK_COMMENT_START`, `BLOCK_COMMENT_END`: uses the correct comment delimiters for whatever language you‚Äôre in.\r\n\r\nAny variable that has no value ‚Äî¬†for instance, `TM_FILENAME` on an untitled document, or `LINE_COMMENT` in a CSS file ‚Äî will resolve to an empty string.\r\n\r\n#### Variable transformation flags\r\n\r\nPulsar supports the three flags defined in the [LSP snippets specification][lsp] and two other flags that are [implemented in VSCode][vscode]:\r\n\r\n* `/upcase` (`foo` ‚Üí `FOO`)\r\n* `/downcase` (`BAR` ‚Üí `bar`)\r\n* `/capitalize` (`lorem ipsum dolor` ‚Üí `Lorem ipsum dolor`) *(first letter uppercased; rest of input left intact)*\r\n* `/camelcase` (`foo bar` ‚Üí `fooBar`, `lorem-ipsum.dolor` ‚Üí `loremIpsumDolor`)\r\n* `/pascalcase` (`foo bar` ‚Üí `FooBar`, `lorem-ipsum.dolor` ‚Üí `LoremIpsumDolor`)\r\n\r\nIt also supports two other common transformations:\r\n\r\n* `/snakecase` (`foo bar` ‚Üí `foo_bar`, `lorem-ipsum.dolor` ‚Üí `lorem_ipsum_dolor`)\r\n* `/kebabcase` (`foo bar` ‚Üí `foo-bar`, `lorem-ipsum.dolor` ‚Üí `lorem-ipsum-dolor`)\r\n\r\nThese transformation flags can also be applied on backreferences in `sed`-style replacements for transformed tab stops. Given the following example snippet body‚Ä¶\r\n\r\n```\r\n[$1] becomes [${1/(.*)/${1:/upcase}/}]\r\n```\r\n\r\n‚Ä¶invoking the snippet and typing `Lorem ipsum dolor` will produce:\r\n\r\n```\r\n[Lorem ipsum dolor] becomes [LOREM IPSUM DOLOR]\r\n```\r\n\r\n\r\n#### Variable caveats\r\n\r\n* `WORKSPACE_NAME`, `WORKSPACE_FOLDER`, and `RELATIVE_PATH` all rely on the presence of a root project folder, but a Pulsar project can technically have multiple root folders. While this is rare, it is handled by `snippets` as follows: whichever project path is an ancestor of the currently active file is treated as the project root ‚Äî or the first one found if multiple roots are ancestors.\r\n* `WORKSPACE_NAME` in VSCode refers to ‚Äúthe name of the opened workspace or folder.‚Äù In the former case, this appears to mean bundled projects with a `.code-workspace` file extension ‚Äî which have no Pulsar equivalent. Instead, `WORKSPACE_NAME` will always refer to the last path component of your project‚Äôs root directory as defined above.\r\n\r\n#### Variables that are not yet supported\r\n\r\nOf the variables supported by VSCode, Pulsar does not yet support:\r\n\r\n* `UUID` (Will automatically be supported when Pulsar uses a version of Electron that has native `crypto.randomUUID`.)\r\n\r\n## Multi-line Snippet Body\r\n\r\nYou can also use multi-line syntax using `\"\"\"` for larger templates:\r\n\r\n```coffee\r\n'.source.js':\r\n  'if, else if, else':\r\n    'prefix': 'ieie'\r\n    'body': \"\"\"\r\n      if (${1:true}) {\r\n        $2\r\n      } else if (${3:false}) {\r\n        $4\r\n      } else {\r\n        $5\r\n      }\r\n    \"\"\"\r\n```\r\n\r\n## Escaping Characters\r\n\r\nIncluding a literal closing brace inside the text provided by a snippet's tab stop will close that tab stop early. To prevent that, escape the brace with two backslashes, like so:\r\n\r\n```coffee\r\n'.source.js':\r\n  'function':\r\n    'prefix': 'funct'\r\n    'body': \"\"\"\r\n      ${1:function () {\r\n        statements;\r\n      \\\\}\r\n      this line is also included in the snippet tab;\r\n      }\r\n      \"\"\"\r\n```\r\n\r\nLikewise, if your snippet includes literal references to `$` or `{`, you may have to escape those with two backslashes as well, depending on the context.\r\n\r\n## Multiple snippets for the same scope\r\n\r\nSnippets for the same scope must be placed within the same key. See [this section of the Pulsar Flight Manual](https://pulsar-edit.dev/docs/launch-manual/sections/using-pulsar/#configuring-with-cson) for more information.\r\n\r\n\r\n[lsp]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#variables\r\n[vscode]: https://code.visualstudio.com/docs/editor/userdefinedsnippets#_variables\r\n",
    "metadata": {
      "name": "snippets",
      "version": "1.8.0",
      "main": "./lib/snippets",
      "description": "Expand snippets matching the current prefix with `tab`.",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": "*"
      },
      "dependencies": {
        "async": "~0.2.6",
        "atom-select-list": "^0.7.0",
        "pegjs": "^0.10.0",
        "scoped-property-store": "^0.17.0",
        "season": "^6.0.2",
        "temp": "~0.8.0",
        "underscore-plus": "^1.0.0"
      },
      "providedServices": {
        "snippets": {
          "description": "Snippets are text shortcuts that can be expanded to their definition.",
          "versions": {
            "0.1.0": "provideSnippets"
          }
        }
      },
      "devDependencies": {
        "eslint": "^8.35.0"
      }
    }
  },
  "solarized-dark-syntax": {
    "readme": "# Solarized Dark Syntax theme\r\n\r\nPulsar theme using the ever popular dark [solarized](http://ethanschoonover.com/solarized) colors.\r\n\r\n<img alt=\"screenshot\" src=\"https://cloud.githubusercontent.com/assets/378023/12602908/9c252b08-c4f0-11e5-8833-6aad91b8fa34.png\" srcset=\"https://cloud.githubusercontent.com/assets/378023/12602909/9c25b366-c4f0-11e5-9f5d-aa6a517f7d7e.png 2x\">\r\n\r\nThis theme is installed by default with Pulsar and can be activated by going to\r\nthe _Themes_ section in the Settings view (`cmd-,`) and selecting it from the\r\n_Syntax Themes_ dropdown menu.\r\n",
    "metadata": {
      "name": "solarized-dark-syntax",
      "theme": "syntax",
      "version": "1.3.0",
      "description": "A dark syntax theme using the solarized colors",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      }
    }
  },
  "solarized-light-syntax": {
    "readme": "# Solarized Light Syntax theme\r\n\r\nPulsar theme using the ever popular light [solarized](http://ethanschoonover.com/solarized) colors.\r\n\r\n<img alt=\"screenshot\" src=\"https://cloud.githubusercontent.com/assets/378023/12602186/87edab3e-c4ea-11e5-8f4a-4b7defda283b.png\" srcset=\"https://cloud.githubusercontent.com/assets/378023/12602177/78d568da-c4ea-11e5-836d-e922ca5c850a.png 2x\">\r\n\r\nThis theme is installed by default with Pulsar and can be activated by going to\r\nthe _Themes_ section in the Settings view (`cmd-,`) and selecting it from the\r\n_Syntax Themes_ dropdown menu.\r\n",
    "metadata": {
      "name": "solarized-light-syntax",
      "theme": "syntax",
      "version": "1.3.0",
      "description": "A light syntax theme using the solarized colors",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      }
    }
  },
  "spell-check": {
    "readme": "# Spell Check package\r\n\r\nHighlights misspelling in Pulsar and shows possible corrections.\r\n\r\nUse <kbd>cmd-shift-:</kbd> for Mac or <kbd>ctrl-shift-:</kbd> for Windows or Linux to bring up the list of corrections when your cursor is on a misspelled word.\r\n\r\nBy default spell check is enabled for the following files:\r\n\r\n* Plain Text\r\n* GitHub Markdown\r\n* Git Commit Message\r\n* AsciiDoc\r\n* reStructuredText\r\n\r\nYou can override this from the _Spell Check_ settings in the Settings View (<kbd>cmd-,</kbd>). The Grammars config option is a list of scopes for which the package will check for spelling errors.\r\n\r\nTo enable _Spell Check_ for your current file type: put your cursor in the file, open the [Command Palette](https://github.com/pulsar-edit/command-palette)\r\n(<kbd>cmd-shift-p</kbd> for Mac or <kbd>ctrl-shift-p</kbd> for Windows or Linux), and run the `Editor: Log Cursor Scope` command. This will trigger a notification which will contain a list of scopes. The first scope that's listed is the one you should add to the list of scopes in the settings for the _Spell Check_ package. Here are some examples: `source.coffee`, `text.plain`, `text.html.basic`.\r\n\r\n## Changing the dictionary\r\n\r\nExcept for Mac, Pulsar needs to know what language to use to perform spell-checking. To list these, set the \"Locales\" configuration option to the [IETF tag](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry) (en-US, fr-FR, etc). More than one language can be used, simply separate them by commas.\r\n\r\nIf no locale is given, then Pulsar will attempt to infer the language based on environment variables and settings.\r\n\r\nIf any value is given for the \"Locales\", then Pulsar will not automatically add the browser language. So, if your browser is United States English (`en-US`), leaving this blank will still do US English checking. However, if it the \"Locales\" is set to French (`fr-FR`), then the checker will only check French. If the \"Locales\" is set to `en-US, fr-FR`, then both languages will be checked.\r\n\r\n### Missing Languages\r\n\r\nThis plugin uses the existing system dictionaries. If a locale is selected that is not installed, a warning will pop up when a document that would be spell-checked is loaded. To disable this, either remove the incorrect language from the \"Locales\" configuration or clear the check on \"Use Locales\" to disable it entirely.\r\n\r\nTo get the search paths used to look for a dictionary, make sure the \"Notices Mode\" is set to \"console\" or \"both\", then reload Atom. The developer's console will have the directory list.\r\n\r\n## Mac\r\n\r\nOn the Mac, checking \"Use System\" will use the operating system's spellchecking library. This uses all of the user's loaded dictionaries and doesn't require any customization within Pulsar.\r\n\r\nChecking \"Use Locales\" and providing locales would use Hunspell as additional dictionaries. Having \"Use Locales\" checked but no locales given will do nothing.\r\n\r\n## Windows 8 and Higher\r\n\r\nFor Windows 8 and 10, this package uses the Windows spell checker, so you must install the language using the regional settings before the language can be chosen inside Pulsar.\r\n\r\n![Add the language from the Language and Regions settings panel](docs/windows-10-language-settings.png)\r\n\r\nIf your Windows user does not have Administration privileges, you'll need to do an extra step once the language has been added to enable the spell checker. To do so, you need to install the \"Basic typing\" language option by following the next steps (you'll be asked for your administrator password):\r\n\r\n![Click on the \"Options\" button on the added language](docs/windows-10-language-settings-2.png)\r\n\r\n![Download the \"Basic Typing\" language option](docs/windows-10-language-settings-3.png)\r\n\r\nOnce the additional language is added, Pulsar will need to be restarted and configured to use it. Add the IEFT tag into the \"Locales\" setting for the language to be set.\r\n\r\nIf a Hunspell dictionary is found on a path (see below), it will be used in favor of the Windows API.\r\n\r\n## Linux\r\n\r\nFor all Linux-based operating systems, \"Use System\" does nothing. It can remained checked but has no impact. \"Use Locales\" is required for spell-checking.\r\n\r\n### Debian, Ubuntu, and Mint\r\n\r\nOn Ubuntu, installing \"Language Support\" may solve problems with the dictionaries. For other distributions (or if Language Support doesn't work), you may use `apt` to install the dictionaries.\r\n\r\n```\r\nsudo apt-get install hunspell-en-gb\r\nsudo apt-get install myspell-en-gb\r\n```\r\n\r\nOn RedHat, the following should work for Italian:\r\n\r\n```\r\nsudo dnf install hunspell\r\nsudo dnf install hunspell-it\r\n```\r\n\r\nYou can get a list of currently installed languages with:\r\n\r\n```\r\n/usr/bin/hunspell -D\r\n```\r\n\r\nPulsar may require a restart to pick up newly installed dictionaries.\r\n\r\n### Arch Linux\r\n\r\nA language may be installed by running:\r\n\r\n```\r\npacman -S hunspell-en_GB\r\n```\r\n\r\nFor the time being, a soft link may be required if the dictionary provided is \"large\".\r\n\r\n```\r\ncd /usr/share/hunspell\r\nsudo ln -s en_GB-large.dic en_GB.dic\r\nsudo ln -s en_GB-large.aff en_GB.aff\r\n```\r\n\r\n## Hunspell Dictionaries\r\n\r\nFor all platforms, a Hunspell-compatible dictionary is also supported. To use this, a `.dic` and `.aff` need to be located in one of the default search directories or in a directory entered into \"Locale paths\" (multiples may be entered with commas separating them). If the appropriate files are found for the locale and \"Use Locales\" is checked, then the dictionary will be used.\r\n\r\nFor example, if the following is set, then `/usr/share/hunspell/en_US.dic` will be used:\r\n\r\n- Use Locales: checked\r\n- Locales: `en-US`\r\n- Locale Paths: `/usr/share/hunspell`\r\n\r\nIf \"Locales\" is not provided, then the user's current language will be inferred from environmental settings.\r\n\r\nIn addition to what is provided, the following paths are checked:\r\n\r\n- `/usr/share/hunspell` (Linux only)\r\n- `/usr/share/myspell` (Linux only)\r\n- `/usr/share/myspell/dicts` (Linux only)\r\n- `/` (Mac only)\r\n- `/System/Library/Spelling` (Mac only)\r\n- `C:\\` (Windows only)\r\n\r\nDictionaries can be downloaded from various sites (such as [wooorm's repository](https://github.com/wooorm/dictionaries) or [LibreOffice's](https://github.com/LibreOffice/dictionaries)), but the file has to be renamed `locale.dic` and `locale.aff`.\r\n\r\n*Example locations to download are not an endorsement.*\r\n",
    "metadata": {
      "name": "spell-check",
      "version": "0.77.1",
      "main": "./lib/main",
      "description": "Highlights misspelled words and shows possible corrections.",
      "dependencies": {
        "atom-pathspec": "^0.0.0",
        "atom-select-list": "^0.7.0",
        "debug": "^4.1.1",
        "multi-integer-range": "^2.0.0",
        "natural": "^0.4.0",
        "spellchecker": "^3.7.1",
        "spelling-manager": "^1.1.0",
        "underscore-plus": "^1"
      },
      "devDependencies": {
        "husky": "^4.2.5",
        "prettier": "^2.1.1"
      },
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": "*"
      },
      "scripts": {
        "format": "prettier --write \"spec/*.js\" \"lib/**/*.js\" \"script/*.js\" --loglevel warn"
      },
      "configSchema": {
        "grammars": {
          "type": "array",
          "default": [
            "source.asciidoc",
            "source.gfm",
            "text.git-commit",
            "text.plain",
            "text.plain.null-grammar",
            "source.rst",
            "text.restructuredtext"
          ],
          "description": "List of scopes for languages which will be checked for misspellings. See [the README](https://github.com/pulsar-edit/pulsar/blob/master/packages/spell-check/README.md) for more information on finding the correct scope for a specific language.",
          "order": 1
        },
        "excludedScopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "List of sub-scopes that will be ignored. Specify the most detailed scope to avoid ignoring otherwise relevant text. The scopes will be parsed as regular expressions. See [the README](https://github.com/pulsar-edit/pulsar/blob/master/packages/spell-check/README.md) for more information on finding the correct scope for a specific language.",
          "order": 2
        },
        "useSystem": {
          "type": "boolean",
          "default": true,
          "description": "If checked, use the built-in spell checking on macOS and some versions of Windows. This setting is ignored on Linux, even if checked.",
          "order": 3
        },
        "useLocales": {
          "type": "boolean",
          "default": true,
          "description": "If checked, then the locales below will be used for checking.",
          "order": 4
        },
        "locales": {
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          },
          "description": "List of locales to use for the system spell-checking. Examples would be `en-US` or `de-DE`. If this is blank, then the default language for the user will be used.",
          "order": 5
        },
        "localePaths": {
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          },
          "description": "List of additional paths to search for dictionary files when checking using locales. If a locale cannot be found in these, the internal code will attempt to find it using common search paths.",
          "order": 6
        },
        "knownWords": {
          "type": "array",
          "default": [],
          "description": "List words that are considered correct even if they do not appear in any other dictionary. Words with capitals or ones that start with `!` are case-sensitive.",
          "order": 7
        },
        "addKnownWords": {
          "type": "boolean",
          "default": false,
          "description": "If checked, then the suggestions will include options to add to the known words list above.",
          "order": 8
        },
        "noticesMode": {
          "type": "string",
          "default": "both",
          "description": "Choose where loading errors and other notices are displayed: popup, console, or both.",
          "order": 9,
          "enum": [
            {
              "value": "both",
              "description": "Display notices in popups and in the console"
            },
            {
              "value": "popup",
              "description": "Display notices only in popups"
            },
            {
              "value": "console",
              "description": "Display notices only on the console"
            }
          ]
        },
        "enableDebug": {
          "type": "boolean",
          "default": false,
          "title": "Enable debug information for spell check",
          "order": 10
        }
      },
      "consumedServices": {
        "spell-check": {
          "versions": {
            "^1.0.0": "consumeSpellCheckers"
          }
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm run format",
          "pre-push": "npm run format"
        }
      }
    }
  },
  "status-bar": {
    "readme": "# Status Bar package\r\n\r\nDisplay information about the current editor such as cursor position, file path, grammar, current branch, ahead/behind commit counts, and line diff count.\r\n\r\n![](https://f.cloud.github.com/assets/671378/2241819/f8418cb8-9ce5-11e3-87e5-109e965986d0.png)\r\n\r\n## Configuration\r\n\r\nThe status bar package accepts the following configuration values:\r\n\r\n* `status-bar.cursorPositionFormat` &mdash; A string that describes the format to use for the cursor position status bar tile. It defaults to `%L:%C`. In the format string, `%L` represents the 1-based line number and `%C` represents the 1-based column number.\r\n\r\n* `status-bar.selectionCountFormat` &mdash; A string that describes the format to use for the selection count status bar tile. It defaults to `(%L, %C)`. In the format string, `%L` represents the 1-based line count and `%C` represents the 1-based character count.\r\n\r\n## API\r\n\r\nThis package provides a service that you can use in other Pulsar packages. To use it, include `status-bar` in the `consumedServices` section of your `package.json`:\r\n\r\n```json\r\n{\r\n  \"name\": \"my-package\",\r\n  \"consumedServices\": {\r\n    \"status-bar\": {\r\n      \"versions\": {\r\n        \"^1.0.0\": \"consumeStatusBar\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThen, in your package's main module, call methods on the service:\r\n\r\n```coffee\r\nmodule.exports =\r\n  activate: -> # ...\r\n\r\n  consumeStatusBar: (statusBar) ->\r\n    @statusBarTile = statusBar.addLeftTile(item: myElement, priority: 100)\r\n\r\n  deactivate: ->\r\n    # ...\r\n    @statusBarTile?.destroy()\r\n    @statusBarTile = null\r\n```\r\n\r\nThe `status-bar` API has four methods:\r\n\r\n  * `addLeftTile({ item, priority })` - Add a tile to the left side of the status bar. Lower priority tiles are placed further to the left.\r\n  * `addRightTile({ item, priority })` - Add a tile to the right side of the status bar. Lower priority tiles are placed further to the right.\r\n\r\nThe `item` parameter to these methods can be a DOM element, a [jQuery object](http://jquery.com), or a model object for which a view provider has been registered in the [the view registry](https://atom.io/docs/api/latest/ViewRegistry).\r\n\r\n  * `getLeftTiles()` - Retrieve all of the tiles on the left side of the status bar.\r\n  * `getRightTiles()` - Retrieve all of the tiles on the right side of the status bar\r\n\r\nAll of these methods return `Tile` objects, which have the following methods:\r\n\r\n  * `getPriority()` - Retrieve the priority that was assigned to the `Tile` when it was created.\r\n  * `getItem()` - Retrieve the `Tile`'s item.\r\n  * `destroy()` - Remove the `Tile` from the status bar.\r\n",
    "metadata": {
      "name": "status-bar",
      "version": "1.8.17",
      "main": "./lib/main",
      "description": "Display information about the current editor such as cursor position, file path, grammar, current branch, ahead/behind commits counts, and line diff count.",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": "*"
      },
      "dependencies": {
        "fs-plus": "^3.0.1",
        "grim": "^2.0.1",
        "underscore-plus": "^1.0.0"
      },
      "providedServices": {
        "status-bar": {
          "description": "A container for indicators at the bottom of the workspace",
          "versions": {
            "1.1.0": "provideStatusBar",
            "0.58.0": "legacyProvideStatusBar"
          }
        }
      },
      "configSchema": {
        "isVisible": {
          "type": "boolean",
          "default": true,
          "description": "Show status bar at the bottom of the workspace"
        },
        "fullWidth": {
          "order": 1,
          "type": "boolean",
          "default": true,
          "title": "Full-width",
          "description": "Fit the status-bar to the window's full-width"
        },
        "cursorPositionFormat": {
          "order": 2,
          "type": "string",
          "default": "%L:%C",
          "description": "Format for the cursor position status bar element, where %L is the line number and %C is the column number"
        },
        "selectionCountFormat": {
          "order": 2,
          "type": "string",
          "default": "(%L, %C)",
          "description": "Format for the selection count status bar element, where %L is the line count and %C is the character count"
        }
      }
    }
  },
  "styleguide": {
    "readme": "# Styleguide package\r\n\r\nStyleguide will show you all the UI components used in Pulsar. It is useful as a reference when developing themes and packages.\r\n\r\n* <kbd>cmd-ctrl-shift-g</kbd> (macOS) and <kbd>ctrl-shift-g</kbd> (Windows and Linux) opens it in a new tab\r\n* You can click on the section headings to expand/collapse them\r\n\r\n![Demo](https://cloud.githubusercontent.com/assets/378023/15767543/ccecf9bc-2983-11e6-9c5e-d228d39f52b0.png)\r\n",
    "metadata": {
      "name": "styleguide",
      "main": "./lib/styleguide",
      "version": "0.49.12",
      "description": "A visual styleguide of the Pulsars's UI components.",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "dependencies": {
        "atom-select-list": "^0.7.0",
        "dedent": "^0.7.0",
        "etch": "0.9.0"
      },
      "deserializers": {
        "StyleguideView": "createStyleguideView"
      },
      "engines": {
        "atom": "*"
      }
    }
  },
  "symbol-provider-ctags": {
    "readme": "# symbol-provider-ctags package\r\n\r\nProvides symbols to `symbols-view` via `ctags`.\r\n\r\nThis is the approach historically used by `symbols-view` ‚Äî¬†now spun out into its own ‚Äúprovider‚Äù package among several.\r\n\r\nThis symbol provider will typically be used on non-Tree-sitter grammars, and possibly when performing a project-wide search. Symbol-based navigation on files with Tree-sitter grammars will typically be provided by `symbol-provider-tree-sitter`.\r\n\r\n## Language support\r\n\r\nThis provider supports any language that is present in its config file, and detects any symbols that match the specified patterns. If your language isn‚Äôt supported and you can help add support, we‚Äôll happily accept a pull request.\r\n\r\n## Toggle file symbols\r\n\r\nFor the **Symbols View: Toggle File Symbols** command, `ctags` will scan the file on disk and emit its tag information to stdout, where it is read by this package. You don‚Äôt need a `TAGS` file to do a symbol search within a single file.\r\n\r\n## Toggle Project Symbols, Go To Declaration\r\n\r\nThese commands require a tags file, typically defined at `.tags`/`tags`/`.TAGS`/`TAGS` in the root of your project. This package cannot generate (or regenerate) your tags file, since it doesn‚Äôt know which files to include. You can run `ctags` regularly on your own to generate this file. Consult [the documentation for Exuberant Ctags](https://ctags.sourceforge.net/ctags.html) for more information.\r\n\r\nOnce your tags file is present, these commands can be fulfilled by `symbol-provider-ctags`‚Ä¶\r\n\r\n* The **Symbols View: Toggle Project Symbols** command works like **Symbols View: Toggle File Symbols** described above, except it‚Äôll show you symbols from the entire project.\r\n* The **Symbols View: Go To Declaration** command works like **Symbols View: Toggle Project Symbols**, except the word under the cursor will be pre-filled in the search box, and a result will automatically be opened if it is the only result.\r\n",
    "metadata": {
      "name": "symbol-provider-ctags",
      "main": "./lib/main",
      "version": "1.0.0",
      "description": "Provides symbols to symbols-view via ctags",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": ">=1.0.0 <2.0.0",
        "node": ">=14"
      },
      "providedServices": {
        "symbol.provider": {
          "description": "Allows external sources to suggest symbols for a given file or project.",
          "versions": {
            "1.0.0": "provideSymbols"
          }
        }
      },
      "configSchema": {
        "useEditorGrammarAsCtagsLanguage": {
          "default": true,
          "type": "boolean",
          "description": "Force `ctags` to use the name of the current file's language in Pulsar when generating tags. By default, `ctags` automatically selects the language of a source file, ignoring those files whose language cannot be determined. This option forces the specified language to be used instead of automatically selecting the language based upon its extension."
        }
      },
      "dependencies": {
        "async": "^0.2.6",
        "fs-plus": "^3.1.1",
        "ctags": "^3.1.0"
      },
      "devDependencies": {
        "eslint": "^8.39.0",
        "temp": "^0.9.4"
      }
    }
  },
  "symbol-provider-tree-sitter": {
    "readme": "# symbol-provider-tree-sitter package\r\n\r\nProvides symbols to `symbols-view` via Tree-sitter queries.\r\n\r\nTree-sitter grammars [with tags queries](https://tree-sitter.github.io/tree-sitter/code-navigation-systems) can very easily give us a list of all the symbols in a file without the drawbacks of a `ctags`-based approach. For instance, they operate on the contents of the buffer, not the contents of the file on disk, so they work just fine in brand-new files and in files that have been modified since the last save.\r\n\r\nThis provider does not currently support project-wide symbol search, but possibly could do so in the future.\r\n\r\n## Tags queries\r\n\r\nThis provider expects for a grammar to have specified a tags query in its grammar definition file. All the built-in Tree-sitter grammars will have such a file. If you‚Äôre using a third-party Tree-sitter grammar that hasn‚Äôt defined one, file an issue on Pulsar and we‚Äôll see what we can do.\r\n\r\nIf you‚Äôre writing your own grammar, or contributing a `tags.scm` to a grammar without one, keep reading.\r\n\r\n### Query syntax\r\n\r\nThe query syntax starts as a subset of what is described [on this page](https://tree-sitter.github.io/tree-sitter/code-navigation-systems). Here‚Äôs what this package can understand:\r\n\r\n* A query that consists of a `@definition.THING` capture with a `@name` capture inside will properly be understood as a symbol with a tag corresponding to `THING` and a name corresponding to the `@name` capture‚Äôs text.\r\n* A query that consists of a `@reference.THING` capture with a `@name` capture inside will be ignored by default. If the proper setting is enabled, each of these references will become a symbol with a tag corresponding to `THING` and a name corresponding to the `@name` capture‚Äôs text.\r\n* All other `@name` captures that are not within either a `@definition` or a `@reference` will be considered as a symbol in isolation. (These symbols can still specify a tag via a `#set!` predicate.)\r\n\r\nTo match the current behavior of the `symbols-view` package, you can usually take a `queries/tags.scm` file from a Tree-sitter repository ‚Äî many parsers define them ‚Äî¬†and paste it straight into your grammar‚Äôs `tags.scm` file.\r\n\r\n#### Advanced features\r\n\r\nThe text of the captured node is what will be displayed as the symbol‚Äôs name, but a few predicates are available to alter that field and others. Symbol predicates use `#set!` and the `symbol` namespace.\r\n\r\n##### Node position descriptors\r\n\r\nSeveral predicates take a **node position descriptor** as an argument. It‚Äôs a string that resembles an object lookup chain in JavaScript:\r\n\r\n```scm\r\n(#set! symbol.prependTextForNode parent.parent.firstNamedChild)\r\n```\r\n\r\nStarting at the captured node, it describes a path to take within the tree in order to get to another meaningful node.\r\n\r\nIn all these examples, if the descriptor is invalid and does not return a node, the predicate will be ignored.\r\n\r\n##### Changing the symbol‚Äôs name\r\n\r\nThere are several ways to add text to the beginning or end of the symbol‚Äôs name:\r\n\r\n###### symbol.prepend\r\n\r\n```scm\r\n(class_declaration\r\n  name: (identifier) @name\r\n  (#set! symbol.prepend \"Class: \"))\r\n```\r\n\r\nThe `symbol.prepend` predicate adds a constant string to the beginning of a symbol name. For a class `Foo` in JavaScript, this predicate would result in a symbol called `Class: Foo`.\r\n\r\n###### symbol.append\r\n\r\n```scm\r\n(class_declaration\r\n  name: (identifier) @name\r\n  (#set! symbol.append \" (class)\"))\r\n```\r\n\r\nThe `symbol.append` predicate adds a constant string to the end of a symbol name. For a class `Foo`, this predicate would result in a symbol called `Foo (class)`.\r\n\r\n\r\n###### symbol.strip\r\n\r\n```scm\r\n(class_declaration\r\n  name: (identifier) @name\r\n  (#set! symbol.strip \"^\\\\s+|\\\\s+$\"))\r\n```\r\n\r\nThe `symbol.strip` predicate will replace everything matched by the regular expression with an empty string. The pattern given is compiled into a JavaScript `RegExp` with an implied `g` (global) flag.\r\n\r\nIn this example, _if_ the `identifier` node included whitespace on either side of the symbol, the symbol‚Äôs name would be stripped of that whitespace before being shown in the UI.\r\n\r\n###### symbol.prependTextForNode\r\n\r\n```scm\r\n(class_body (method_definition\r\n  name: (property_identifier) @name\r\n  (#set! symbol.prependTextForNode \"parent.parent.previousNamedSibling\")\r\n  (#set! symbol.joiner \"#\")\r\n))\r\n```\r\n\r\nThe `symbol.prependTextForNode` predicate will look up the text of the node referred to by the provided _node position descriptor_, then prepend that text to the symbol name. If `symbol.joiner` is provided, it will be inserted in between the two.\r\n\r\nIn this example, a `bar` method on a class named `Foo` would have a symbol name of `Foo#bar`.\r\n\r\n###### symbol.prependSymbolForNode\r\n\r\n```scm\r\n(class_body (method_definition\r\n  name: (property_identifier) @name\r\n  (#set! symbol.prependSymbolForNode \"parent.parent.previousNamedSibling\")\r\n  (#set! symbol.joiner \"#\")\r\n))\r\n```\r\n\r\nThe `symbol.prependSymbolForNode` predicate will look up the symbol name of the node referred to by the provided _node position descriptor_, then prepend that name to the symbol name. If `symbol.joiner` is provided, it will be inserted in between the two.\r\n\r\nUnlike `symbol.prependTextForNode`, the node referred to with the descriptor must have its own symbol name, and it must have been processed already ‚Äî that is, it must be a symbol whose name was determined earlier than that of the current node.\r\n\r\nThis allows us to incorporate any transformations that were applied to the other node‚Äôs symbol name. We can use this to build ‚Äúrecursive‚Äù symbol names ‚Äî for instance, JSON keys whose symbols consist of their entire key path from the root.\r\n\r\n##### Adding the `context` field\r\n\r\nThe `context` field of a symbol is a short piece of text meant to give context. For instance, a symbol that represents a class method could have a `context` field that contains the name of the class it belongs to. The `context` field is not filtered on.\r\n\r\n###### symbol.contextNode\r\n\r\n```scm\r\n(class_body (method_definition\r\n  name: (property_identifier) @name\r\n  (#set! symbol.contextNode \"parent.parent.previousNamedSibling\")\r\n))\r\n```\r\n\r\nThe `symbol.contextNode` predicate will set the value of a symbol‚Äôs `context` property to the text of a node based on the provided _node position descriptor_.\r\n\r\n###### symbol.context\r\n\r\n```scm\r\n(class_body (method_definition\r\n  name: (property_identifier) @name\r\n  (#set! symbol.context \"class\")\r\n))\r\n```\r\n\r\nThe `symbol.context` predicate will set the value of a symbol‚Äôs `context` property to a fixed string.\r\n\r\nThe point of `context` is to provide information to help you tell symbols apart, so you probably don‚Äôt want to set it to a fixed value. But this predicate is available just in case.\r\n\r\n##### Adding a tag\r\n\r\nThe `tag` field is a string that indicates a symbol‚Äôs kind or type. It should be a single word wherever possible. A `tag` for a class method‚Äôs symbol would typically be `method`, whereas the symbol for the class itself would typically have a `tag` of `class`. These tags will be indicated in the UI with a badge, an icon, or both.\r\n\r\nIf you‚Äôre not sure what to call something, consult [this list from the Language Server Protocol spec](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#symbolKind). But some symbols may not fit any of those, so ultimately it‚Äôs up to the author. (For example, headings in Markdown files are assigned a kind of `heading`.)\r\n\r\nFor consistency, tags should be all lowercase. The interface will apply its own casing effect through CSS (`text-transform: capitalize` by default, but customizable in UI themes).\r\n\r\nThe preferred method of adding a tag is to leverage the `@definition.` captures that are typically present in a tags file. For instance, in this excerpt from the JavaScript grammar‚Äôs `tags.scm` file‚Ä¶\r\n\r\n```scm\r\n(assignment_expression\r\n  left: [\r\n    (identifier) @name\r\n    (member_expression\r\n      property: (property_identifier) @name)\r\n  ]\r\n  right: [(arrow_function) (function)]\r\n) @definition.function\r\n```\r\n\r\n‚Ä¶the resulting symbol will infer a `tag` value of `function`.\r\n\r\nIn cases where this is impractical, you can provide the tag explicitly with a predicate.\r\n\r\nNearly all the tags on [the aforementioned list](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#symbolKind) will also apply an appropriate `icon` to their symbol when assigned. If you choose a tag name not on that list, or want to override the default, you can use the `symbol.icon` predicate described below.\r\n\r\n###### symbol.tag\r\n\r\n```scm\r\n(class_body (method_definition\r\n  name: (property_identifier) @name\r\n  (#set! symbol.tag \"class\")\r\n))\r\n```\r\n\r\nThe `symbol.tag` predicate will set the value of a symbol‚Äôs `tag` property to a fixed string.\r\n\r\nThe `tag` property is used to supply a word that represents the symbol in some way. For conventional symbols, this will often be something like `class` or `function`.\r\n\r\nThis provider will attempt to match certain common tag values to icons. This can be overridden by specifying an explicit `symbol.icon` value.\r\n\r\n###### symbol.icon\r\n\r\n```scm\r\n(class_body (method_definition\r\n  name: (property_identifier) @name\r\n  (#set! symbol.icon \"package\")\r\n))\r\n```\r\n\r\nThe icon to be shown alongside the symbol in a list. Will only be shown if the user has enabled the ‚ÄúShow Icons in Symbols View‚Äù option in the `symbols-view` settings. You can see the full list of available icons by invoking the **Styleguide: Show** command and browsing the ‚ÄúIcons‚Äù section. The value can include the preceding `icon-` or can omit it; e.g., `icon-package` and `package` are both valid values.\r\n\r\nIf this value is omitted, this provider will still attempt to match certain common tag values to icons. If `tag` is not present on the symbol, or is an uncommon value, there will be a blank space instead of an icon.\r\n",
    "metadata": {
      "name": "symbol-provider-tree-sitter",
      "main": "./lib/main",
      "version": "1.0.0",
      "description": "Provides symbols to symbols-view based on tree-sitter queries",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": ">=1.0.0 <2.0.0",
        "node": ">=14"
      },
      "providedServices": {
        "symbol.provider": {
          "description": "Allows external sources to suggest symbols for a given file or project.",
          "versions": {
            "1.0.0": "provideSymbols"
          }
        }
      },
      "configSchema": {
        "includeReferences": {
          "default": false,
          "type": "boolean",
          "description": "Whether to make symbols out of references (for example, function calls) in addition to definitions."
        }
      },
      "devDependencies": {
        "eslint": "^8.44.0",
        "fs-plus": "^3.1.1",
        "temp": "^0.9.4"
      }
    }
  },
  "symbols-view": {
    "readme": "# symbols-view\r\n\r\nDisplay a list of symbols in the editor. Typically, a symbol will correspond to a meaningful part of a source code file (like a function definition) but can refer to other important parts of files depending on context.\r\n\r\n## Providers\r\n\r\n`symbols-view` uses a provider/subscriber model similar to that of `autocomplete-plus`. This package implements the UI, but it relies on other packages to suggest symbols.\r\n\r\n### Built-in providers\r\n\r\nThe original symbol provider, `ctags`, now lives in its own provider package called `symbol-provider-ctags`. Another package, `symbol-provider-tree-sitter`, is the preferred provider (by default) in buffers that use a Tree-sitter grammar.\r\n\r\n### Community package providers\r\n\r\nAny package can act as a symbol provider. [These are the packages on the Pulsar Package Repository that provide the `symbol.provider` service.](https://web.pulsar-edit.dev/packages?service=symbol.provider&serviceType=provided)\r\n\r\n## Commands\r\n\r\n|Command|Description|Keybinding (Linux/Windows)|Keybinding (macOS)|\r\n|-------|-----------|------------------|-----------------|\r\n|`symbols-view:toggle-file-symbols`|Show all symbols in current file|<kbd>ctrl-r</kbd>|<kbd>cmd-r</kbd>|\r\n|`symbols-view:toggle-project-symbols`|Show all symbols in the project|<kbd>ctrl-shift-r</kbd>|<kbd>cmd-shift-r</kbd>|\r\n|`symbols-view:go-to-declaration`|Jump to the symbol under the cursor|<kbd>ctrl-alt-down</kbd>|<kbd>cmd-alt-down</kbd>|\r\n|`symbols-view:return-from-declaration`|Return from the jump|<kbd>ctrl-alt-up</kbd>|<kbd>cmd-alt-up</kbd>|\r\n|`symbols-view:show-active-providers`|Display a list of all known symbol providers|||\r\n\r\nCommands relating to project-wide symbols may fail if no provider can satisfy a request for project-wide symbols. See `symbol-provider-ctags` for more information.\r\n",
    "metadata": {
      "name": "symbols-view",
      "version": "1.0.0",
      "main": "./lib/main",
      "types": "./lib/main.d.ts",
      "description": "Jump to a function/method in the current editor or in the project.",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "engines": {
        "atom": "*",
        "node": ">=14"
      },
      "configSchema": {
        "quickJumpToFileSymbol": {
          "default": true,
          "type": "boolean",
          "order": 1,
          "description": "Automatically visit selected file-symbols as you navigate the symbols list."
        },
        "showIconsInSymbolsView": {
          "default": true,
          "type": "boolean",
          "order": 2,
          "description": "When enabled, an icon will be shown alongside a symbol if the symbol provider specifies one."
        },
        "useBadgeColors": {
          "default": false,
          "type": "boolean",
          "order": 3,
          "description": "Whether to use an assortment of colors for symbol badges. If enabled, each badge will be one of sixteen colors based on its text. Badge colors are generated automatically as hue variants of your theme‚Äôs ordinary badge color."
        },
        "prefillSelectedText": {
          "default": true,
          "type": "boolean",
          "order": 4,
          "description": "When enabled, any text you may have selected in the active editor will be used as the search query in the symbols list."
        },
        "showProviderNamesInSymbolsView": {
          "default": false,
          "type": "boolean",
          "order": 5,
          "description": "When enabled, the name of the provider will be shown alongside each result."
        },
        "preferCertainProviders": {
          "default": [],
          "type": "array",
          "order": 6,
          "items": {
            "type": "string"
          },
          "description": "A comma-separated list of preferred providers. Used to help break ties when more than one provider can contribute symbols. Anything on this list will be preferred over anything not on this list, and earlier items will be preferred over later items. (A provider can be identified by its official name or its package name; run the **Symbols View: Show Active Providers** command to see both values.)"
        },
        "providerTimeout": {
          "default": 2000,
          "type": "number",
          "order": 7,
          "description": "How long providers have to respond to symbol requests before this package gives up and shows the list. If a certain provider is particularly slow, you may have to increase this value. (Does not apply to project-wide symbol search **if** the list is already visible.)"
        },
        "enableDebugLogging": {
          "default": false,
          "type": "boolean",
          "order": 10,
          "description": "Whether to log certain diagnostic information to the console. (For example: which provider is chosen for a given task.)"
        }
      },
      "consumedServices": {
        "symbol.provider": {
          "description": "Allows external sources to suggest symbols for a given file or project.",
          "versions": {
            "1.0.0": "consumeSymbolProvider"
          }
        }
      },
      "providedServices": {
        "hyperclick": {
          "versions": {
            "0.1.0": "provideHyperclick"
          }
        }
      },
      "license": "MIT",
      "dependencies": {
        "atom-select-list": "^0.8.1",
        "fs-plus": "^3.1.1",
        "fuzzaldrin": "^2.1.0",
        "murmurhash-js": "^1.0.0"
      },
      "devDependencies": {
        "eslint": "^8.39.0",
        "temp": "^0.9.4"
      }
    }
  },
  "tabs": {
    "readme": "# Tabs package\r\n\r\nDisplay selectable tabs above the editor.\r\n\r\n![](https://cloud.githubusercontent.com/assets/18362/10862852/c6de2de0-800d-11e5-8158-284f30aaf5d2.png)\r\n\r\n## API\r\n\r\nTabs can display icons next to file names. These icons are customizable by installing a package that provides an `atom.file-icons` service.\r\n\r\nThe `atom.file-icons` service must provide the following methods:\r\n\r\n* `iconClassForPath(path)` - Returns a CSS class name to add to the tab view\r\n",
    "metadata": {
      "name": "tabs",
      "version": "0.110.2",
      "main": "./lib/main",
      "description": "Display a selectable tab for each editor open.",
      "license": "MIT",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "engines": {
        "atom": ">=1.17.0"
      },
      "dependencies": {
        "fs-plus": "^3.0.0",
        "temp": "~0.8.1",
        "underscore-plus": "1.x"
      },
      "consumedServices": {
        "atom.file-icons": {
          "versions": {
            "1.0.0": "consumeFileIcons"
          }
        },
        "file-icons.element-icons": {
          "versions": {
            "1.0.0": "consumeElementIcons"
          }
        }
      },
      "configSchema": {
        "showIcons": {
          "type": "boolean",
          "default": true,
          "description": "Show icons in tabs for panes which define an icon, such as the Settings and Project Find Results."
        },
        "alwaysShowTabBar": {
          "type": "boolean",
          "default": true,
          "description": "Show the tab bar even when only one tab is open."
        },
        "tabScrolling": {
          "type": [
            "boolean",
            "string"
          ],
          "enum": [
            true,
            false,
            "platform"
          ],
          "default": "platform",
          "description": "Jump to next or previous tab by scrolling on the tab bar."
        },
        "tabScrollingThreshold": {
          "type": "integer",
          "default": 120,
          "description": "Threshold for switching to the next/previous tab when the `Tab Scrolling` config setting is enabled. Higher numbers mean that a longer scroll is needed to jump to the next/previous tab."
        },
        "enableVcsColoring": {
          "type": "boolean",
          "title": "Enable VCS Coloring",
          "default": false,
          "description": "Color file names in tabs based on VCS status, similar to how file names are colored in the tree view."
        },
        "addNewTabsAtEnd": {
          "type": "boolean",
          "default": false,
          "description": "Add new tabs at the end of the tab bar, rather than after active tab."
        },
        "enableMruTabSwitching": {
          "type": "boolean",
          "title": "Enable MRU Tab Switching",
          "default": true,
          "description": "Enable tab switching in most-recently-used order. This setting has no effect if ctrl-tab or ctrl-shift-tab are already rebound via your keymap or another package."
        },
        "displayMruTabList": {
          "type": "boolean",
          "title": "Display MRU Tab Switching List",
          "default": true,
          "description": "When MRU Tab Switching is enabled, display the most-recently-used tab list."
        }
      }
    }
  },
  "timecop": {
    "readme": "# Timecop package\r\n\r\nDisplays information about where time is spent while Pulsar loads.\r\n\r\n  * Startup time\r\n  * Compile cache\r\n  * Package loading time\r\n  * Package activation time\r\n  * Theme loading time\r\n  * Theme activation time\r\n\r\n![](https://cloud.githubusercontent.com/assets/378023/20422582/9e5907f8-adae-11e6-8267-faa3514de896.png)\r\n\r\nInspired by [Timecop](http://www.imdb.com/title/tt0111438/) the movie. :watch: :rotating_light:\r\n",
    "metadata": {
      "name": "timecop",
      "version": "0.36.2",
      "description": "Displays information about where time is spent while Pulsar loads.",
      "main": "./lib/main",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": "*"
      },
      "deserializers": {
        "TimecopView": "createTimecopView"
      },
      "dependencies": {
        "dedent": "^0.7.0",
        "etch": "^0.12.6",
        "underscore-plus": "^1.0.0"
      }
    }
  },
  "tree-view": {
    "readme": "# Tree View package\r\n\r\nExplore and open files in the current project.\r\n\r\nPress <kbd>ctrl-\\\\</kbd> or <kbd>cmd-\\\\</kbd> to open/close the tree view and\r\n<kbd>alt-\\\\</kbd> or <kbd>ctrl-0</kbd> to focus it.\r\n\r\nWhen the tree view has focus you can press <kbd>a</kbd>, <kbd>shift-a</kbd>,\r\n<kbd>m</kbd>, or <kbd>delete</kbd> to add, move or delete files and folders.\r\n\r\nTo move the Tree view to the opposite side, select and drag the Tree view dock to the other side.\r\n\r\n![](https://f.cloud.github.com/assets/671378/2241932/6d9cface-9ceb-11e3-9026-31d5011d889d.png)\r\n\r\n## API\r\nThis package provides a service that you can use in other Pulsar packages.\r\nTo use it, include `tree-view` in the `consumedServices` section of your\r\n`package.json`:\r\n\r\n``` json\r\n{\r\n  \"name\": \"my-package\",\r\n  \"consumedServices\": {\r\n    \"tree-view\": {\r\n      \"versions\": {\r\n        \"^1.0.0\": \"consumeTreeView\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThen, in your package's main module, call methods on the service:\r\n\r\n``` coffee\r\nmodule.exports =\r\n  activate: -> # ...\r\n\r\n  consumeTreeView: (treeView) ->\r\n    selectedPaths = treeView.selectedPaths()\r\n    # Do something with the paths...\r\n```\r\n\r\nThe `tree-view` API has two methods:\r\n* `selectedPaths()` - Returns the paths to the selected tree view entries.\r\n* `entryForPath(entryPath)` - Returns a tree view entry for the given path.\r\n\r\n## Customization\r\nThe tree view displays icons next to files. These icons are customizable by\r\ninstalling a package that provides an `atom.file-icons` service.\r\n\r\nThe `atom.file-icons` service must provide the following methods:\r\n* `iconClassForPath(path)` - Returns a CSS class name to add to the file view.\r\n",
    "metadata": {
      "name": "tree-view",
      "version": "0.229.1",
      "main": "./lib/main",
      "description": "Explore and open files in the current project.",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": "*"
      },
      "private": true,
      "dependencies": {
        "fs-plus": "^3.0.0",
        "minimatch": "~0.3.0",
        "pathwatcher": "^8.1.0",
        "temp": "~0.9.0",
        "underscore-plus": "^1.0.0"
      },
      "deserializers": {
        "TreeView": "getTreeViewInstance"
      },
      "consumedServices": {
        "atom.file-icons": {
          "versions": {
            "1.0.0": "consumeFileIcons"
          }
        },
        "file-icons.element-icons": {
          "versions": {
            "1.0.0": "consumeElementIcons"
          }
        }
      },
      "providedServices": {
        "tree-view": {
          "description": "A tree-like view of directories and files",
          "versions": {
            "1.0.0": "provideTreeView"
          }
        }
      },
      "configSchema": {
        "squashDirectoryNames": {
          "type": "boolean",
          "default": false,
          "title": "Collapse directories",
          "description": "Collapse directories that only contain a single directory."
        },
        "hideVcsIgnoredFiles": {
          "type": "boolean",
          "default": false,
          "title": "Hide VCS Ignored Files",
          "description": "Don't show files and directories ignored by the current project's VCS system. For example, projects using Git have these paths defined in their `.gitignore` file."
        },
        "hideIgnoredNames": {
          "type": "boolean",
          "default": false,
          "description": "Don't show items matched by the `Ignored Names` core config setting."
        },
        "sortFoldersBeforeFiles": {
          "type": "boolean",
          "default": true,
          "description": "When listing directory items, list subdirectories before listing files."
        },
        "autoReveal": {
          "type": "boolean",
          "default": false,
          "description": "Reveal tree view entries when they become the active pane item."
        },
        "focusOnReveal": {
          "type": "boolean",
          "default": true,
          "description": "Focus the tree view when revealing entries."
        },
        "alwaysOpenExisting": {
          "type": "boolean",
          "default": false,
          "description": "When opening a file, always focus an already-existing view of the file even if it's in another pane."
        },
        "hiddenOnStartup": {
          "type": "boolean",
          "default": false,
          "description": "When Pulsar is opened, the view is hidden."
        }
      }
    }
  },
  "update-package-dependencies": {
    "readme": "## Update Package Dependencies package\r\n\r\nRuns `puslar -p install` from the current project's directory. This will install all dependencies referenced in the `package.json` file to the `node_modules` folder.\r\n\r\nThis should only be used in projects that are Pulsar packages.\r\n",
    "metadata": {
      "name": "update-package-dependencies",
      "main": "./lib/update-package-dependencies",
      "version": "0.13.1",
      "private": true,
      "description": "Runs `apm install` for the current project",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": ">0.39.0"
      },
      "activationCommands": {
        "atom-workspace": [
          "update-package-dependencies:update"
        ]
      },
      "consumedServices": {
        "status-bar": {
          "versions": {
            "^1.1.0": "consumeStatusBar"
          }
        }
      },
      "dependencies": {}
    }
  },
  "welcome": {
    "readme": "## Welcome package\r\n\r\nOpens a welcome editor with helpful information the very first time Pulsar is\r\nopened.\r\n",
    "metadata": {
      "name": "welcome",
      "version": "0.36.9",
      "description": "Welcome users to Pulsar with useful information",
      "main": "./lib/main",
      "atomTestRunner": "atom-mocha-test-runner",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      },
      "scripts": {
        "test": "atom --test test/*.test.js"
      },
      "configSchema": {
        "showOnStartup": {
          "type": "boolean",
          "default": true,
          "description": "Show welcome panes with useful information when opening a new Pulsar window."
        },
        "showChangeLog": {
          "type": "boolean",
          "default": true,
          "description": "Show a Change Log after an update."
        },
        "lastViewedChangeLog": {
          "type": "string",
          "default": "0.0.0",
          "description": "This is used to keep track of what Change Logs you've dismissed. Change this value to see one again."
        }
      },
      "deserializers": {
        "WelcomeView": "createWelcomeView",
        "GuideView": "createGuideView",
        "ConsentView": "createConsentView"
      },
      "dependencies": {
        "etch": "0.9.0"
      },
      "devDependencies": {
        "atom-mocha-test-runner": "^1.0.0"
      }
    }
  },
  "whitespace": {
    "readme": "# Whitespace package\r\n\r\nStrips trailing whitespace and adds a trailing newline when an editor is saved.\r\n\r\nTo disable/enable features for a certain language package, you can use syntax-scoped properties in your `config.cson`. E.g.\r\n\r\n```coffee\r\n'.slim.text':\r\n  whitespace:\r\n    removeTrailingWhitespace: false\r\n```\r\n\r\nYou find the `scope` on top of a grammar package's settings view.\r\n\r\nNote: for `.source.jade`, `.source.diff`, `.source.pug` and `.source.patch`, removing trailing whitespace is disabled by default.\r\n",
    "metadata": {
      "name": "whitespace",
      "version": "0.37.8",
      "main": "./lib/main",
      "description": "Strips trailing whitespace and adds a trailing newline when an editor is saved.",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "license": "MIT",
      "engines": {
        "atom": "*"
      },
      "devDependencies": {
        "fs-plus": "2.x",
        "temp": "~0.8.1"
      },
      "configSchema": {
        "removeTrailingWhitespace": {
          "type": "boolean",
          "default": true,
          "scopes": {
            ".source.diff": {
              "default": false
            },
            ".source.jade": {
              "default": false
            },
            ".source.patch": {
              "default": false
            },
            ".source.pug": {
              "default": false
            }
          },
          "description": "Automatically remove whitespace characters at ends of lines when the buffer is saved. To disable/enable for a certain language, use [syntax-scoped properties](https://github.com/pulsar-edit/whitespace#readme) in your `config.cson`."
        },
        "keepMarkdownLineBreakWhitespace": {
          "type": "boolean",
          "default": true,
          "description": "Markdown uses two or more spaces at the end of a line to signify a line break. Enable this option to keep this whitespace in Markdown files, even if other settings would remove it."
        },
        "ignoreWhitespaceOnCurrentLine": {
          "type": "boolean",
          "default": true,
          "description": "Skip removing trailing whitespace on the line which the cursor is positioned on when the buffer is saved. To disable/enable for a certain language, use [syntax-scoped properties](https://github.com/pulsar-edit/pulsar/tree/master/packages/whitespace#readme) in your `config.cson`."
        },
        "ignoreWhitespaceOnlyLines": {
          "type": "boolean",
          "default": false,
          "description": "Skip removing trailing whitespace on lines which consist only of whitespace characters. To disable/enable for a certain language, use [syntax-scoped properties](https://github.com/pulsar-edit/pulsar/tree/master/packages/whitespace#readme) in your `config.cson`."
        },
        "ensureSingleTrailingNewline": {
          "type": "boolean",
          "default": true,
          "description": "If the buffer doesn't end with a newline character when it's saved, then append one. If it ends with more than one newline, remove all but one. To disable/enable for a certain language, use [syntax-scoped properties](https://github.com/pulsar-edit/pulsar/tree/master/packages/whitespace#readme) in your `config.cson`."
        }
      }
    }
  },
  "wrap-guide": {
    "readme": "# Wrap Guide package\r\n\r\nThe `wrap-guide` package places a vertical line in each editor at a certain column to guide your formatting, so lines do not exceed a certain width.\r\n\r\nBy default, the wrap-guide is placed at the value of `editor.preferredLineLength` config setting. The 80th column is used as the fallback if the config value is unset.\r\n\r\n![](https://f.cloud.github.com/assets/671378/2241976/dbf6a8f6-9ced-11e3-8fef-d8a226301530.png)\r\n\r\n## Configuration\r\n\r\nYou can customize where the column is placed for different file types by opening the Settings View and configuring the \"Preferred Line Length\" value. If you do not want the guide to show for a particular language, that can be set using scoped configuration. For example, to turn off the guide for GitHub-Flavored Markdown, you can add the following to your `config.cson`:\r\n\r\n```coffeescript\r\n'.source.gfm':\r\n  'wrap-guide':\r\n    'enabled': false\r\n```\r\n\r\nIt is possible to configure the color and/or width of the line by adding the following CSS/LESS to your `styles.less`:\r\n\r\n```css\r\natom-text-editor .wrap-guide {\r\n  width: 10px;\r\n  background-color: red;\r\n}\r\n```\r\n\r\nMultiple guide lines are also supported. For example, add the following to your `config.cson` to create four columns at the indicated positions:\r\n\r\n```coffeescript\r\n'wrap-guide':\r\n  'columns': [72, 80, 100, 120]\r\n```\r\n\r\n> Note: When using multiple guide lines, the right-most guide line functions as your `editor.preferredLineLength` setting.\r\n",
    "metadata": {
      "name": "wrap-guide",
      "version": "0.41.1",
      "main": "./lib/main",
      "description": "Displays a vertical line at the 80th character in the editor.\nThis packages uses the config value of `editor.preferredLineLength` when set.",
      "license": "MIT",
      "repository": "https://github.com/pulsar-edit/pulsar",
      "engines": {
        "atom": "*"
      },
      "configSchema": {
        "columns": {
          "default": [],
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Display guides at each of the listed character widths. Leave blank for one guide at your `editor.preferredLineLength`."
        },
        "modifyPreferredLineLength": {
          "default": true,
          "type": "boolean",
          "description": "Modify the Editor's Preferred Line Length when changing Wrap Guide's Columns setting."
        },
        "enabled": {
          "default": true,
          "type": "boolean"
        },
        "showWrapGuide": {
          "type": "string",
          "description": "Choose when to show the wrap guide.",
          "enum": [
            {
              "value": "always",
              "description": "Always"
            },
            {
              "value": "wrapping",
              "description": "When soft wrap is enabled"
            },
            {
              "value": "atPreferredLineLength",
              "description": "When soft wrap at preferred line length is enabled"
            }
          ],
          "default": "always"
        }
      }
    }
  },
  "github": {
    "readme": "# Pulsar GitHub Package\r\n\r\nThe Pulsar GitHub package provides Git and GitHub integration for Pulsar.\r\n\r\n<img width=\"880\" alt=\"GitHub for Pulsar\" src=\"https://user-images.githubusercontent.com/378023/49062969-2e717a00-f259-11e8-8207-2ecbc6981cd6.png\">\r\n\r\n<img width=\"880\" alt=\"git-integration\" src=\"https://user-images.githubusercontent.com/378023/49062970-2f0a1080-f259-11e8-91e9-9402ec76cd66.png\">\r\n\r\n<img width=\"880\" alt=\"pull request view\" src=\"https://user-images.githubusercontent.com/6842965/55753896-7aa7a480-5a19-11e9-8540-a932a746fc29.png\">\r\n\r\n<img width=\"880\" alt=\"in-editor pull request comments\" src=\"https://user-images.githubusercontent.com/6842965/55753909-81ceb280-5a19-11e9-9762-2716b5e0f09f.png\">\r\n\r\n## Installation\r\n\r\nThis package is bundled with Pulsar starting in version 1.18, and does not need to be installed separately.\r\n\r\n## License\r\n\r\nThe MIT license grant is not for GitHub's trademarks, which include the logo designs. GitHub reserves all trademark and copyright rights in and to all GitHub trademarks.\r\n\r\nGitHub¬Æ and its stylized versions and the Invertocat mark are GitHub's Trademarks or registered Trademarks. When using GitHub's logos, be sure to follow the GitHub [logo guidelines](https://github.com/logos).\r\n",
    "metadata": {
      "name": "github",
      "main": "./lib/index",
      "version": "0.36.20",
      "description": "GitHub integration",
      "repository": "https://github.com/pulsar-edit/github",
      "license": "MIT",
      "scripts": {
        "test": "node script/test",
        "test:coverage": "node script/test-coverage",
        "test:coverage:text": "nyc --reporter=text npm run test:coverage",
        "test:coverage:html": "nyc --reporter=html npm run test:coverage",
        "test:coverage:lcov": "npm run test:coverage",
        "test:snapshot": "node script/test-snapshot",
        "report:coverage": "nyc report --reporter=cobertura --reporter=html --reporter=lcovonly",
        "lint": "eslint --max-warnings 0 test lib",
        "fetch-schema": "node script/fetch-schema",
        "relay": "relay-compiler --src ./lib --schema graphql/schema.graphql",
        "postinstall": "node script/redownload-electron-bins.js"
      },
      "engines": {
        "atom": ">=1.37.0"
      },
      "atomTestRunner": "./test/runner",
      "atomTranspilers": [
        {
          "glob": "{lib,test}/**/*.js",
          "transpiler": "@atom/babel7-transpiler",
          "options": {
            "cacheKeyFiles": [
              "package.json",
              ".babelrc.js",
              "assert-messages-plugin.js",
              "graphql/schema.graphql",
              ".nycrc.json"
            ],
            "setBabelEnv": "ATOM_GITHUB_BABEL_ENV"
          }
        }
      ],
      "dependencies": {
        "@atom/babel-plugin-chai-assert-async": "1.0.0",
        "@atom/babel7-transpiler": "1.0.0-1",
        "@babel/core": "7.x <7.12.10",
        "@babel/generator": "7.8.0",
        "@babel/plugin-proposal-class-properties": "7.8.0",
        "@babel/plugin-proposal-object-rest-spread": "7.8.0",
        "@babel/preset-env": "7.12.1",
        "@babel/preset-react": "7.8.0",
        "babel-plugin-relay": "5.0.0",
        "bintrees": "1.0.2",
        "bytes": "3.1.0",
        "classnames": "2.2.6",
        "compare-sets": "1.0.1",
        "dompurify": "2.0.17",
        "dugite": "2.5.2",
        "event-kit": "2.5.3",
        "fs-extra": "4.0.3",
        "graphql": "14.5.8",
        "keytar": "4.13.0",
        "lodash.memoize": "4.1.2",
        "marked": "0.8.0",
        "moment": "2.28.0",
        "node-emoji": "1.10.0",
        "prop-types": "15.7.2",
        "react": "16.12.0",
        "react-dom": "16.12.0",
        "react-relay": "5.0.0",
        "react-select": "1.2.1",
        "react-tabs": "^3.0.0",
        "relay-runtime": "5.0.0",
        "temp": "0.9.1",
        "tinycolor2": "1.4.1",
        "tree-kill": "1.2.2",
        "underscore-plus": "1.7.0",
        "what-the-diff": "0.6.0",
        "what-the-status": "1.0.3",
        "whats-my-line": "https://github.com/pulsar-edit/whats-my-line/archive/4029ca9567a0bf0f12843890461fb13e758cfcbf.tar.gz",
        "yubikiri": "2.0.0"
      },
      "devDependencies": {
        "@atom/mocha-test-runner": "1.6.0",
        "babel-plugin-istanbul": "5.2.0",
        "chai": "4.2.0",
        "chai-as-promised": "7.1.1",
        "cross-unzip": "0.2.1",
        "dedent-js": "1.0.1",
        "electron-devtools-installer": "3.1.1",
        "electron-link": "0.4.3",
        "electron-mksnapshot": "^12.0.0",
        "enzyme": "3.10.0",
        "enzyme-adapter-react-16": "1.7.1",
        "eslint": "6.8.0",
        "eslint-config-fbjs-opensource": "1.0.0",
        "eslint-plugin-jsx-a11y": "6.2.3",
        "globby": "10.0.1",
        "hock": "1.4.1",
        "lodash.isequal": "4.5.0",
        "lodash.isequalwith": "4.4.0",
        "mkdirp": "0.5.1",
        "mocha": "6.2.2",
        "mocha-junit-reporter": "1.23.1",
        "mocha-multi-reporters": "1.1.7",
        "mocha-stress": "1.0.0",
        "node-fetch": "2.6.1",
        "nyc": "14.1.1",
        "relay-compiler": "5.0.0",
        "semver": "6.3.0",
        "sinon": "9.0.3",
        "test-until": "1.1.1"
      },
      "consumedServices": {
        "status-bar": {
          "versions": {
            "^1.0.0": "consumeStatusBar"
          }
        },
        "metrics-reporter": {
          "versions": {
            "^1.1.0": "consumeReporter"
          }
        }
      },
      "configSchema": {
        "keyboardNavigationDelay": {
          "type": "number",
          "default": 300,
          "description": "How long to wait before showing a diff view after navigating to an entry with the keyboard"
        },
        "viewChangesForCurrentFileDiffPaneSplitDirection": {
          "type": "string",
          "default": "none",
          "enum": [
            "none",
            "right",
            "down"
          ],
          "title": "Direction to open diff pane",
          "description": "Direction to split the active pane when showing diff associated with open file. If 'none', the results will be shown in the active pane."
        },
        "gitDiagnostics": {
          "type": "boolean",
          "default": false,
          "description": "Write detailed diagnostic information about git operations to the console"
        },
        "filesystemEventDiagnostics": {
          "type": "boolean",
          "default": false,
          "description": "Trace observed filesystem events to the console"
        },
        "performanceMask": {
          "type": "array",
          "default": [
            ".*"
          ],
          "items": {
            "type": "string"
          },
          "description": "Performance event stream patterns to capture"
        },
        "performanceToConsole": {
          "type": "boolean",
          "default": false,
          "description": "Log performance data to the console"
        },
        "performanceToDirectory": {
          "type": "string",
          "default": "",
          "description": "Log performance data to JSON files in a directory"
        },
        "performanceToProfile": {
          "type": "boolean",
          "default": false,
          "description": "Capture CPU profiles"
        },
        "automaticCommitMessageWrapping": {
          "type": "boolean",
          "default": true,
          "description": "Hard wrap commit message body in commit box to 72 characters. Does not apply to expanded commit editors, where message formatting is preserved."
        },
        "graphicalConflictResolution": {
          "type": "boolean",
          "default": true,
          "description": "Resolve merge conflicts with in-editor controls"
        },
        "showDiffIconGutter": {
          "type": "boolean",
          "default": false,
          "description": "Show change regions within a file patch with icons in addition to color"
        },
        "excludedUsers": {
          "type": "string",
          "default": "",
          "description": "Comma-separated list of email addresses to exclude from the co-author selection list"
        },
        "reportCannotLocateWorkspaceError": {
          "type": "boolean",
          "default": "false",
          "description": "Log an error to the console if a git repository cannot be located for the opened file"
        },
        "sourceRemoteName": {
          "type": "string",
          "default": "origin",
          "description": "Name of the git remote to create when creating a new repository"
        },
        "remoteFetchProtocol": {
          "type": "string",
          "default": "https",
          "enum": [
            "https",
            "ssh"
          ],
          "description": "Transport protocol to prefer when creating a new git remote"
        }
      },
      "deserializers": {
        "GitTimingsView": "createGitTimingsView",
        "IssueishDetailItem": "createIssueishPaneItemStub",
        "IssueishPaneItem": "createIssueishPaneItemStub",
        "GitDockItem": "createDockItemStub",
        "GithubDockItem": "createDockItemStub",
        "FilePatchControllerStub": "createFilePatchControllerStub",
        "CommitPreviewStub": "createCommitPreviewStub",
        "CommitDetailStub": "createCommitDetailStub",
        "ReviewsStub": "createReviewsStub"
      },
      "greenkeeper": {
        "ignore": [
          "electron-link",
          "electron-mksnapshot"
        ]
      }
    }
  }
}